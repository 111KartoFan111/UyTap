# backend/services/background_service.py
import logging
import threading
import time
from datetime import datetime, timezone, timedelta
from typing import Dict, Any
import schedule

from models.database import SessionLocal
from services.auth_service import AuthService
from services.task_service import TaskService

logger = logging.getLogger(__name__)


class BackgroundService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    
    _running = False
    _scheduler_thread = None
    
    @classmethod
    def start_scheduled_tasks(cls):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        if cls._running:
            logger.warning("Background service is already running")
            return
        
        cls._running = True
        logger.info("üîÑ Starting background service...")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        cls._setup_schedule()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        cls._scheduler_thread = threading.Thread(target=cls._run_scheduler, daemon=True)
        cls._scheduler_thread.start()
        
        logger.info("‚úÖ Background service started")
    
    @classmethod
    def stop_scheduled_tasks(cls):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        cls._running = False
        logger.info("üõë Background service stopped")
    
    @classmethod
    def _setup_schedule(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–∫–∞–∂–¥—ã–π —á–∞—Å)
        schedule.every().hour.do(cls._cleanup_expired_tokens)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00)
        schedule.every().day.at("06:00").do(cls._create_daily_tasks)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00)
        schedule.every().sunday.at("02:00").do(cls._cleanup_old_logs)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        schedule.every(30).minutes.do(cls._check_overdue_tasks)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
        schedule.every(6).hours.do(cls._update_statistics)
        
        logger.info("üìÖ Scheduled tasks configured")
    
    @classmethod
    def _run_scheduler(cls):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while cls._running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"Error in scheduler: {e}")
                time.sleep(60)
    
    @classmethod
    def _cleanup_expired_tokens(cls):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            with SessionLocal() as db:
                deleted_count = AuthService.cleanup_expired_tokens(db)
                logger.info(f"üßπ Cleaned up {deleted_count} expired tokens")
        except Exception as e:
            logger.error(f"Error cleaning up tokens: {e}")
    
    @classmethod
    def _create_daily_tasks(cls):
        """–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            with SessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                from models.models import Organization
                organizations = db.query(Organization).all()
                
                total_tasks = 0
                for org in organizations:
                    tasks = TaskService.create_recurring_tasks(db, org.id)
                    total_tasks += len(tasks)
                
                logger.info(f"üìã Created {total_tasks} daily recurring tasks")
        except Exception as e:
            logger.error(f"Error creating daily tasks: {e}")
    
    @classmethod
    def _cleanup_old_logs(cls):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            with SessionLocal() as db:
                from services.init_service import DatabaseInitService
                cleanup_result = DatabaseInitService.cleanup_old_data(db)
                logger.info(f"üßπ Weekly cleanup completed: {cleanup_result}")
        except Exception as e:
            logger.error(f"Error during weekly cleanup: {e}")
    
    @classmethod
    def _check_overdue_tasks(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            with SessionLocal() as db:
                from models.extended_models import Task, TaskStatus
                from sqlalchemy import and_
                
                # –ù–∞–π—Ç–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                now = datetime.now(timezone.utc)
                overdue_tasks = db.query(Task).filter(
                    and_(
                        Task.due_date < now,
                        Task.status.in_([TaskStatus.PENDING, TaskStatus.ASSIGNED, TaskStatus.IN_PROGRESS])
                    )
                ).all()
                
                if overdue_tasks:
                    logger.warning(f"‚ö†Ô∏è Found {len(overdue_tasks)} overdue tasks")
                    
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ —ç—Å–∫–∞–ª–∞—Ü–∏–∏
                    for task in overdue_tasks:
                        logger.warning(f"Overdue task: {task.title} (due: {task.due_date})")
                
        except Exception as e:
            logger.error(f"Error checking overdue tasks: {e}")
    
    @classmethod
    def _update_statistics(cls):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            with SessionLocal() as db:
                from models.models import Organization
                organizations = db.query(Organization).all()
                
                for org in organizations:
                    # –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–π, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Ç.–¥.
                    pass
                
                logger.info("üìä Statistics updated")
        except Exception as e:
            logger.error(f"Error updating statistics: {e}")
    
    @classmethod
    def execute_task_now(cls, task_name: str) -> Dict[str, Any]:
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            if task_name == "cleanup_tokens":
                cls._cleanup_expired_tokens()
            elif task_name == "create_daily_tasks":
                cls._create_daily_tasks()
            elif task_name == "cleanup_logs":
                cls._cleanup_old_logs()
            elif task_name == "check_overdue":
                cls._check_overdue_tasks()
            elif task_name == "update_stats":
                cls._update_statistics()
            else:
                return {"success": False, "error": f"Unknown task: {task_name}"}
            
            return {"success": True, "message": f"Task '{task_name}' executed successfully"}
            
        except Exception as e:
            logger.error(f"Error executing task {task_name}: {e}")
            return {"success": False, "error": str(e)}
    
    @classmethod
    def get_status(cls) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "running": cls._running,
            "scheduler_thread_alive": cls._scheduler_thread.is_alive() if cls._scheduler_thread else False,
            "scheduled_jobs": len(schedule.jobs),
            "next_run": str(schedule.next_run()) if schedule.jobs else None
        }