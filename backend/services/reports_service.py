# backend/services/reports_service.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func, desc, text
import uuid
import io
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import black, darkblue, gray
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors

from models.extended_models import (
    Property, Rental, Client, Task, RoomOrder, Payroll, User, Organization,
    PropertyStatus, TaskStatus, OrderStatus, PayrollType, UserRole
)
from schemas.reports import (
    FinancialSummaryReport, PropertyOccupancyReport, 
    EmployeePerformanceReport, ClientAnalyticsReport
)


class ReportsService:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    @staticmethod
    def debug_report_data(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> Dict[str, Any]:
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        
        debug_info = {
            "period": {
                "start_date": start_date.isoformat(),
                "end_date": end_date.isoformat(),
                "duration_days": (end_date - start_date).days
            },
            "data_counts": {},
            "sample_data": {},
            "date_ranges": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_to_check = [
            ("rentals", Rental),
            ("clients", Client),
            ("properties", Property),
            ("tasks", Task),
            ("room_orders", RoomOrder),
            ("payrolls", Payroll),
            ("users", User)
        ]
        
        for table_name, model in tables_to_check:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            total_count = db.query(model).filter(
                model.organization_id == organization_id
            ).count()
            
            debug_info["data_counts"][f"{table_name}_total"] = total_count
            
            if hasattr(model, 'created_at'):
                # –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
                period_count = db.query(model).filter(
                    and_(
                        model.organization_id == organization_id,
                        model.created_at >= start_date,
                        model.created_at <= end_date
                    )
                ).count()
                debug_info["data_counts"][f"{table_name}_period"] = period_count
                
                # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
                date_range = db.query(
                    func.min(model.created_at),
                    func.max(model.created_at)
                ).filter(model.organization_id == organization_id).first()
                
                debug_info["date_ranges"][table_name] = {
                    "min_date": date_range[0].isoformat() if date_range[0] else None,
                    "max_date": date_range[1].isoformat() if date_range[1] else None
                }
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                sample_records = db.query(model).filter(
                    model.organization_id == organization_id
                ).order_by(desc(model.created_at)).limit(3).all()
                
                debug_info["sample_data"][table_name] = [
                    {
                        "id": str(record.id),
                        "created_at": record.created_at.isoformat() if record.created_at else None,
                        "details": ReportsService._get_record_details(record)
                    }
                    for record in sample_records
                ]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π (paid_amount –≤ –∞—Ä–µ–Ω–¥–µ)
        rental_payments = db.query(
            func.sum(Rental.paid_amount),
            func.count(Rental.id),
            func.avg(Rental.paid_amount)
        ).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.paid_amount > 0
            )
        ).first()
        
        debug_info["payments"] = {
            "total_paid_amount": float(rental_payments[0] or 0),
            "rentals_with_payments": rental_payments[1] or 0,
            "average_payment": float(rental_payments[2] or 0)
        }
        
        return debug_info
    
    @staticmethod
    def _get_record_details(record) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        details = {}
        
        if isinstance(record, Rental):
            details = {
                "total_amount": record.total_amount,
                "paid_amount": record.paid_amount,
                "is_active": record.is_active,
                "start_date": record.start_date.isoformat() if record.start_date else None,
                "end_date": record.end_date.isoformat() if record.end_date else None
            }
        elif isinstance(record, Client):
            details = {
                "name": f"{record.first_name} {record.last_name}",
                "total_rentals": record.total_rentals,
                "total_spent": record.total_spent
            }
        elif isinstance(record, Property):
            details = {
                "name": record.name,
                "status": record.status.value if record.status else None,
                "is_active": record.is_active
            }
        elif isinstance(record, Task):
            details = {
                "title": record.title,
                "status": record.status.value if record.status else None,
                "payment_amount": record.payment_amount
            }
        
        return details
    
    @staticmethod
    def debug_payroll_data(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> Dict[str, Any]:
        """–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç"""
        
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_id}")
        print(f"üìÖ –û—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        all_payrolls = db.query(Payroll).filter(
            Payroll.organization_id == organization_id
        ).all()
        
        debug_info = {
            "total_payrolls": len(all_payrolls),
            "paid_payrolls": len([p for p in all_payrolls if p.is_paid]),
            "unpaid_payrolls": len([p for p in all_payrolls if not p.is_paid]),
            "payroll_details": [],
            "period_analysis": {
                "report_start": start_date.isoformat(),
                "report_end": end_date.isoformat(),
                "overlapping_payrolls": 0,
                "total_expense_in_period": 0
            }
        }
        
        total_expense = 0
        overlapping_count = 0
        
        for payroll in all_payrolls:
            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            payroll_start = payroll.period_start.replace(tzinfo=None) if payroll.period_start.tzinfo else payroll.period_start
            payroll_end = payroll.period_end.replace(tzinfo=None) if payroll.period_end.tzinfo else payroll.period_end
            report_start = start_date.replace(tzinfo=None) if start_date.tzinfo else start_date
            report_end = end_date.replace(tzinfo=None) if end_date.tzinfo else end_date
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
            has_overlap = payroll_start <= report_end and payroll_end >= report_start
            
            payroll_detail = {
                "id": str(payroll.id),
                "user_name": f"{payroll.user.first_name} {payroll.user.last_name}" if payroll.user else "Unknown",
                "period_start": payroll_start.isoformat(),
                "period_end": payroll_end.isoformat(),
                "net_amount": payroll.net_amount,
                "is_paid": payroll.is_paid,
                "has_overlap": has_overlap,
                "expense_in_period": 0
            }
            
            if has_overlap and payroll.is_paid:
                overlapping_count += 1
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                overlap_start = max(payroll_start, report_start)
                overlap_end = min(payroll_end, report_end)
                
                if overlap_end > overlap_start:
                    overlap_days = (overlap_end - overlap_start).days + 1
                    total_payroll_days = (payroll_end - payroll_start).days + 1
                    
                    if total_payroll_days > 0:
                        proportion = overlap_days / total_payroll_days
                        expense_for_period = payroll.net_amount * proportion
                        total_expense += expense_for_period
                        payroll_detail["expense_in_period"] = expense_for_period
                        payroll_detail["proportion"] = proportion
                        payroll_detail["overlap_days"] = overlap_days
                        payroll_detail["total_payroll_days"] = total_payroll_days
            
            debug_info["payroll_details"].append(payroll_detail)
        
        debug_info["period_analysis"]["overlapping_payrolls"] = overlapping_count
        debug_info["period_analysis"]["total_expense_in_period"] = total_expense
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {overlapping_count} –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –∑–∞—Ä–ø–ª–∞—Ç")
        print(f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥: {total_expense}")
        
        return debug_info
    
    @staticmethod
    def generate_financial_summary(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> FinancialSummaryReport:
        """–£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        print(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {organization_id}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Ä—É—á–∫–∏, —á—Ç–æ –∏ –≤ –æ—Ç—á–µ—Ç–µ –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º
        rental_revenue = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–µ–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        rentals = db.query(Rental).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.start_date < end_date,  # –ê—Ä–µ–Ω–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –ø–µ—Ä–∏–æ–¥–æ–º
                Rental.end_date > start_date,
                Rental.paid_amount > 0
            )
        ).all()
        
        print(f"üè† –ù–∞–π–¥–µ–Ω–æ –∞—Ä–µ–Ω–¥ —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–∞: {len(rentals)}")
        
        for rental in rentals:
            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ (–∫–∞–∫ –≤ –æ—Ç—á–µ—Ç–µ –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º)
            overlap_start = max(rental.start_date.replace(tzinfo=None), start_date.replace(tzinfo=None))
            overlap_end = min(rental.end_date.replace(tzinfo=None), end_date.replace(tzinfo=None))
            
            if overlap_end > overlap_start:
                days_in_period = (overlap_end - overlap_start).days + 1
                total_rental_days = (rental.end_date - rental.start_date).days + 1
                
                if total_rental_days > 0:
                    revenue_per_day = rental.paid_amount / total_rental_days
                    period_revenue = revenue_per_day * days_in_period
                    rental_revenue += period_revenue
                    
                    print(f"  üí∞ –ê—Ä–µ–Ω–¥–∞ {rental.id}: {rental.paid_amount} ‚Ç∏ –∑–∞ {total_rental_days} –¥–Ω–µ–π, –≤ –ø–µ—Ä–∏–æ–¥–µ {days_in_period} –¥–Ω–µ–π = {period_revenue:.2f} ‚Ç∏")
        
        print(f"üí∞ –ò—Ç–æ–≥–æ –≤—ã—Ä—É—á–∫–∞ –æ—Ç –∞—Ä–µ–Ω–¥—ã: {rental_revenue}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–∫–∞–∑—ã –≤ –Ω–æ–º–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—Ä–∏–Ω—Ü–∏–ø –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        orders_revenue_query = db.query(func.sum(RoomOrder.total_amount)).filter(
            and_(
                RoomOrder.organization_id == organization_id,
                RoomOrder.is_paid == True,
                RoomOrder.created_at >= start_date,
                RoomOrder.created_at <= end_date
            )
        )
        orders_revenue = orders_revenue_query.scalar() or 0.0
        
        print(f"üõéÔ∏è –í—ã—Ä—É—á–∫–∞ –æ—Ç –∑–∞–∫–∞–∑–æ–≤: {orders_revenue}")
        
        total_revenue = rental_revenue + orders_revenue
        print(f"üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–æ–≤
        all_payrolls = db.query(Payroll).filter(
            and_(
                Payroll.organization_id == organization_id,
                Payroll.is_paid == True
            )
        ).all()
        
        staff_expenses = 0
        print(f"üíº –í—Å–µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {len(all_payrolls)}")
        
        for payroll in all_payrolls:
            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            payroll_start = payroll.period_start.replace(tzinfo=None) if payroll.period_start.tzinfo else payroll.period_start
            payroll_end = payroll.period_end.replace(tzinfo=None) if payroll.period_end.tzinfo else payroll.period_end
            report_start = start_date.replace(tzinfo=None) if start_date.tzinfo else start_date
            report_end = end_date.replace(tzinfo=None) if end_date.tzinfo else end_date
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
            if payroll_start <= report_end and payroll_end >= report_start:
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                overlap_start = max(payroll_start, report_start)
                overlap_end = min(payroll_end, report_end)
                
                if overlap_end > overlap_start:
                    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                    overlap_days = (overlap_end - overlap_start).days + 1
                    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
                    total_payroll_days = (payroll_end - payroll_start).days + 1
                    
                    if total_payroll_days > 0:
                        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã
                        proportion = overlap_days / total_payroll_days
                        expense_for_period = payroll.net_amount * proportion
                        staff_expenses += expense_for_period
                        
                        print(f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ {payroll.id}: {payroll.net_amount} ‚Ç∏ (–ø—Ä–æ–ø–æ—Ä—Ü–∏—è: {proportion:.2f}, –¥–æ–±–∞–≤–ª–µ–Ω–æ: {expense_for_period:.2f})")
        
        print(f"üë• –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª: {staff_expenses}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        try:
            from models.extended_models import InventoryMovement
            material_expenses_query = db.query(func.sum(InventoryMovement.total_cost)).filter(
                and_(
                    InventoryMovement.organization_id == organization_id,
                    InventoryMovement.movement_type == "out",
                    InventoryMovement.created_at >= start_date,
                    InventoryMovement.created_at <= end_date,
                    InventoryMovement.total_cost > 0
                )
            )
            material_expenses = material_expenses_query.scalar() or 0.0
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {e}")
            material_expenses = 0.0
        
        print(f"üì¶ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: {material_expenses}")
        
        total_expenses = staff_expenses + material_expenses
        net_profit = total_revenue - total_expenses
        
        print(f"üìä –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expenses}")
        print(f"üí° –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
        occupancy_rate = ReportsService._calculate_unified_occupancy_rate(
            db, organization_id, start_date, end_date
        )
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π
        properties_count = db.query(Property).filter(
            and_(
                Property.organization_id == organization_id,
                Property.is_active == True
            )
        ).count()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç
        now = datetime.now(timezone.utc)
        active_rentals = db.query(Rental).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.is_active == True,
                Rental.start_date <= now,
                Rental.end_date >= now
            )
        ).count()
        
        print(f"üè¢ –ü–æ–º–µ—â–µ–Ω–∏–π: {properties_count}, –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {active_rentals}")
        print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {occupancy_rate}%")
        
        return FinancialSummaryReport(
            period_start=start_date,
            period_end=end_date,
            total_revenue=total_revenue,
            rental_revenue=rental_revenue,
            orders_revenue=orders_revenue,
            total_expenses=total_expenses,
            staff_expenses=staff_expenses,
            material_expenses=material_expenses,
            net_profit=net_profit,
            occupancy_rate=occupancy_rate,
            properties_count=properties_count,
            active_rentals=active_rentals
        )

    @staticmethod
    def _calculate_unified_occupancy_rate(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> float:
        """–ï–î–ò–ù–´–ô –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        
        print(f"üìä –†–∞—Å—á–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        occupancy_reports = ReportsService.generate_property_occupancy_report(
            db, organization_id, start_date, end_date
        )
        
        if not occupancy_reports:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º")
            return 0.0
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π
        total_days = sum(report.total_days for report in occupancy_reports)
        total_occupied_days = sum(report.occupied_days for report in occupancy_reports)
        
        print(f"üéØ –û–±—â–∏—Ö –¥–Ω–µ–π: {total_days}, –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π: {total_occupied_days}")
        
        if total_days == 0:
            return 0.0
        
        unified_occupancy_rate = round((total_occupied_days / total_days) * 100, 2)
        print(f"üìà –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {unified_occupancy_rate}%")
        
        return unified_occupancy_rate

    @staticmethod
    def get_unified_revenue_for_period(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> float:
        """–ï–î–ò–ù–´–ô –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Ä—É—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        
        total_revenue = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–µ–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        rentals = db.query(Rental).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.start_date < end_date,
                Rental.end_date > start_date,
                Rental.paid_amount > 0
            )
        ).all()
        
        for rental in rentals:
            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –ø–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é
            overlap_start = max(rental.start_date.replace(tzinfo=None), start_date.replace(tzinfo=None))
            overlap_end = min(rental.end_date.replace(tzinfo=None), end_date.replace(tzinfo=None))
            
            if overlap_end > overlap_start:
                days_in_period = (overlap_end - overlap_start).days + 1
                total_rental_days = (rental.end_date - rental.start_date).days + 1
                
                if total_rental_days > 0:
                    revenue_per_day = rental.paid_amount / total_rental_days
                    total_revenue += revenue_per_day * days_in_period
        
        return total_revenue

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
    @staticmethod
    def generate_property_occupancy_report(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime,
        property_id: Optional[uuid.UUID] = None
    ) -> List[PropertyOccupancyReport]:
        """–û—Ç—á–µ—Ç –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        
        query = db.query(Property).filter(
            and_(
                Property.organization_id == organization_id,
                Property.is_active == True
            )
        )
        
        if property_id:
            query = query.filter(Property.id == property_id)
        
        properties = query.all()
        reports = []
        
        period_days = (end_date - start_date).days + 1
        
        for prop in properties:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Ä—É—á–∫–∏
            property_revenue = ReportsService._get_property_revenue_for_period(
                db, prop.id, organization_id, start_date, end_date
            )
            
            # –†–∞—Å—á–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            occupied_days = ReportsService._get_property_occupied_days(
                db, prop.id, start_date, end_date
            )
            
            occupancy_rate = (occupied_days / period_days * 100) if period_days > 0 else 0
            occupancy_rate = min(occupancy_rate, 100.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 100%
            
            reports.append(PropertyOccupancyReport(
                property_id=str(prop.id),
                property_name=prop.name,
                property_number=prop.number,
                total_days=period_days,
                occupied_days=occupied_days,
                occupancy_rate=round(occupancy_rate, 2),
                revenue=round(property_revenue, 2)
            ))
        
        return sorted(reports, key=lambda x: x.occupancy_rate, reverse=True)

    @staticmethod
    def _get_property_revenue_for_period(
        db: Session,
        property_id: uuid.UUID,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ä—É—á–∫—É –ø–æ–º–µ—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        
        rentals = db.query(Rental).filter(
            and_(
                Rental.property_id == property_id,
                Rental.organization_id == organization_id,
                Rental.start_date < end_date,
                Rental.end_date > start_date,
                Rental.paid_amount > 0
            )
        ).all()
        
        total_revenue = 0
        
        for rental in rentals:
            overlap_start = max(rental.start_date.replace(tzinfo=None), start_date.replace(tzinfo=None))
            overlap_end = min(rental.end_date.replace(tzinfo=None), end_date.replace(tzinfo=None))
            
            if overlap_end > overlap_start:
                days_in_period = (overlap_end - overlap_start).days + 1
                total_rental_days = (rental.end_date - rental.start_date).days + 1
                
                if total_rental_days > 0:
                    revenue_per_day = rental.paid_amount / total_rental_days
                    total_revenue += revenue_per_day * days_in_period
        
        return total_revenue

    @staticmethod
    def generate_employee_performance_report(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime,
        role: Optional[UserRole] = None,
        user_id: Optional[uuid.UUID] = None
    ) -> List[EmployeePerformanceReport]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        
        print(f"üë• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        query = db.query(User).filter(User.organization_id == organization_id)
        
        if role:
            query = query.filter(User.role == role)
        
        if user_id:
            query = query.filter(User.id == user_id)
        
        employees = query.all()
        print(f"üë§ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees)}")
        
        reports = []
        
        for employee in employees:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee.first_name} {employee.last_name}")
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            completed_tasks = db.query(Task).filter(
                and_(
                    Task.assigned_to == employee.id,
                    Task.status == TaskStatus.COMPLETED,
                    Task.completed_at >= start_date,
                    Task.completed_at <= end_date
                )
            ).all()
            
            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(completed_tasks)}")
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            avg_completion_time = None
            if completed_tasks:
                completion_times = [
                    task.actual_duration for task in completed_tasks
                    if task.actual_duration is not None
                ]
                if completion_times:
                    avg_completion_time = sum(completion_times) / len(completion_times)
            
            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
            quality_ratings = [
                task.quality_rating for task in completed_tasks
                if task.quality_rating is not None
            ]
            avg_quality = sum(quality_ratings) / len(quality_ratings) if quality_ratings else None
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞
            total_earnings = 0
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            all_payrolls = db.query(Payroll).filter(
                and_(
                    Payroll.user_id == employee.id,
                    Payroll.organization_id == organization_id,
                    Payroll.is_paid == True
                )
            ).all()
            
            print(f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–ø–ª–∞—Ç —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {len(all_payrolls)}")
            
            # 2. –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º –ø–µ—Ä–∏–æ–¥–æ–≤
            for payroll in all_payrolls:
                # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                payroll_start = payroll.period_start.replace(tzinfo=None) if payroll.period_start.tzinfo else payroll.period_start
                payroll_end = payroll.period_end.replace(tzinfo=None) if payroll.period_end.tzinfo else payroll.period_end
                report_start = start_date.replace(tzinfo=None) if start_date.tzinfo else start_date
                report_end = end_date.replace(tzinfo=None) if end_date.tzinfo else end_date
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
                if payroll_start <= report_end and payroll_end >= report_start:
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    overlap_start = max(payroll_start, report_start)
                    overlap_end = min(payroll_end, report_end)
                    
                    if overlap_end > overlap_start:
                        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                        overlap_days = (overlap_end - overlap_start).days + 1
                        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
                        total_payroll_days = (payroll_end - payroll_start).days + 1
                        
                        if total_payroll_days > 0:
                            # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã
                            proportion = overlap_days / total_payroll_days
                            earnings_for_period = payroll.net_amount * proportion
                            total_earnings += earnings_for_period
                            
                            print(f"üíµ –ó–∞—Ä–ø–ª–∞—Ç–∞ {payroll.id}: {payroll.net_amount} ‚Ç∏ (–ø—Ä–æ–ø–æ—Ä—Ü–∏—è: {proportion:.2f}, –¥–æ–±–∞–≤–ª–µ–Ω–æ: {earnings_for_period:.2f})")
            
            # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏–∑ –∑–∞–¥–∞—á
            task_earnings = sum(task.payment_amount or 0 for task in completed_tasks if task.is_paid)
            if task_earnings > 0:
                total_earnings += task_earnings
                print(f"üéØ –î–æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–¥–∞—á–∏: {task_earnings}")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            try:
                from models.payroll_operation import PayrollOperation
                operation_earnings = db.query(func.sum(PayrollOperation.amount)).filter(
                    and_(
                        PayrollOperation.user_id == employee.id,
                        PayrollOperation.organization_id == organization_id,
                        PayrollOperation.created_at >= start_date,
                        PayrollOperation.created_at <= end_date,
                        PayrollOperation.is_applied == True,
                        PayrollOperation.operation_type.in_(['bonus', 'overtime', 'allowance'])
                    )
                ).scalar() or 0
                
                if operation_earnings > 0:
                    total_earnings += operation_earnings
                    print(f"üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã: {operation_earnings}")
                    
            except (ImportError, Exception) as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã: {e}")
                operation_earnings = 0
            
            print(f"üíé –ò—Ç–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee.first_name}: {total_earnings:.2f} ‚Ç∏")
            
            reports.append(EmployeePerformanceReport(
                user_id=str(employee.id),
                user_name=f"{employee.first_name} {employee.last_name}",
                role=employee.role.value,
                tasks_completed=len(completed_tasks),
                average_completion_time=avg_completion_time,
                quality_rating=round(avg_quality, 2) if avg_quality else None,
                earnings=total_earnings
            ))
        
        print(f"üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –ø–æ {len(reports)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
        return sorted(reports, key=lambda x: x.earnings, reverse=True)
    
    @staticmethod
    def get_payroll_period_earnings(
        db: Session,
        user_id: uuid.UUID,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ –∑–∞—Ä–ø–ª–∞—Ç—ã
        """
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞—Ä–ø–ª–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        payrolls = db.query(Payroll).filter(
            and_(
                Payroll.user_id == user_id,
                Payroll.organization_id == organization_id,
                Payroll.is_paid == True,
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
                or_(
                    and_(Payroll.period_start <= end_date, Payroll.period_end >= start_date)
                )
            )
        ).all()
        
        total_earnings = 0
        
        for payroll in payrolls:
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤
            overlap_start = max(payroll.period_start, start_date)
            overlap_end = min(payroll.period_end, end_date)
            
            if overlap_end > overlap_start:
                # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
                overlap_days = (overlap_end - overlap_start).days + 1
                # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã
                total_days = (payroll.period_end - payroll.period_start).days + 1
                
                # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã
                if total_days > 0:
                    proportion = overlap_days / total_days
                    earnings_for_period = payroll.net_amount * proportion
                    total_earnings += earnings_for_period
                else:
                    # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã = 1 –¥–µ–Ω—å –∏ –æ–Ω –≤ –Ω–∞—à–µ–º –ø–µ—Ä–∏–æ–¥–µ
                    total_earnings += payroll.net_amount
        
        return total_earnings

    @staticmethod
    def generate_client_analytics_report(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> ClientAnalyticsReport:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        total_clients = db.query(Client).filter(
            Client.organization_id == organization_id
        ).count()
        
        # –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        new_clients = db.query(Client).filter(
            and_(
                Client.organization_id == organization_id,
                Client.created_at >= start_date,
                Client.created_at <= end_date
            )
        ).count()
        
        # –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–±–æ–ª–µ–µ –æ–¥–Ω–æ–π –∞—Ä–µ–Ω–¥—ã)
        returning_clients_query = db.query(Client.id).filter(
            Client.organization_id == organization_id
        ).join(Rental).group_by(Client.id).having(func.count(Rental.id) > 1)
        
        returning_clients = returning_clients_query.count()
        
        # –ê—Ä–µ–Ω–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        rentals = db.query(Rental).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.created_at >= start_date,
                Rental.created_at <= end_date
            )
        ).all()
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        avg_stay_duration = 0
        if rentals:
            total_duration = sum(
                (rental.end_date - rental.start_date).days
                for rental in rentals
            )
            avg_stay_duration = total_duration / len(rentals)
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã
        avg_spending = 0
        if rentals:
            total_spending = sum(rental.total_amount for rental in rentals)
            avg_spending = total_spending / len(rentals)
        
        # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã –ø–æ —Ç—Ä–∞—Ç–∞–º
        top_clients_data = db.query(
            Client.id,
            Client.first_name,
            Client.last_name,
            func.sum(Rental.total_amount).label('total_spent'),
            func.avg((func.extract('epoch', Rental.end_date) - func.extract('epoch', Rental.start_date)) / 86400).label('avg_duration')
        ).join(Rental).filter(
            and_(
                Client.organization_id == organization_id,
                Rental.created_at >= start_date,
                Rental.created_at <= end_date
            )
        ).group_by(Client.id, Client.first_name, Client.last_name).order_by(
            desc('total_spent')
        ).limit(10).all()
        
        top_clients = [
            {
                "client_id": str(client.id),
                "client_name": f"{client.first_name} {client.last_name}",
                "spending": float(client.total_spent or 0),
                "stay_duration": float(client.avg_duration or 0)
            }
            for client in top_clients_data
        ]
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
        client_sources = db.query(
            Client.source,
            func.count(Client.id).label('count')
        ).filter(
            and_(
                Client.organization_id == organization_id,
                Client.created_at >= start_date,
                Client.created_at <= end_date
            )
        ).group_by(Client.source).all()
        
        sources_dict = {
            (source.source or "unknown"): source.count 
            for source in client_sources
        }
        
        return ClientAnalyticsReport(
            total_clients=total_clients,
            new_clients=new_clients,
            returning_clients=returning_clients,
            average_stay_duration=round(avg_stay_duration, 2),
            average_spending=round(avg_spending, 2),
            top_clients=top_clients,
            client_sources=sources_dict
        )
    
    @staticmethod
    def get_user_payroll(
        db: Session,
        user_id: uuid.UUID,
        period_start: datetime,
        period_end: datetime
    ) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        payroll = db.query(Payroll).filter(
            and_(
                Payroll.user_id == user_id,
                Payroll.period_start >= period_start,
                Payroll.period_end <= period_end
            )
        ).first()
        
        if not payroll:
            return {
                "period_start": period_start,
                "period_end": period_end,
                "payroll_type": "not_found",
                "base_rate": 0,
                "hours_worked": 0,
                "tasks_completed": 0,
                "tasks_payment": 0,
                "bonus": 0,
                "tips": 0,
                "other_income": 0,
                "deductions": 0,
                "taxes": 0,
                "gross_amount": 0,
                "net_amount": 0,
                "is_paid": False,
                "breakdown": []
            }
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
        tasks = db.query(Task).filter(
            and_(
                Task.assigned_to == user_id,
                Task.status == TaskStatus.COMPLETED,
                Task.is_paid == True,
                Task.completed_at >= period_start,
                Task.completed_at <= period_end
            )
        ).all()
        
        task_breakdown = [
            {
                "task_id": str(task.id),
                "title": task.title,
                "task_type": task.task_type.value,
                "completed_at": task.completed_at,
                "payment_amount": task.payment_amount,
                "quality_rating": task.quality_rating
            }
            for task in tasks
        ]
        
        return {
            "period_start": payroll.period_start,
            "period_end": payroll.period_end,
            "payroll_type": payroll.payroll_type.value,
            "base_rate": payroll.base_rate or 0,
            "hours_worked": payroll.hours_worked,
            "tasks_completed": payroll.tasks_completed,
            "tasks_payment": payroll.tasks_payment,
            "bonus": payroll.bonus,
            "tips": payroll.tips,
            "other_income": payroll.other_income,
            "deductions": payroll.deductions,
            "taxes": payroll.taxes,
            "gross_amount": payroll.gross_amount,
            "net_amount": payroll.net_amount,
            "is_paid": payroll.is_paid,
            "paid_at": payroll.paid_at,
            "breakdown": task_breakdown
        }
    
    @staticmethod
    def generate_dashboard_summary(
        db: Session,
        organization_id: uuid.UUID,
        user_role: UserRole
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        
        today = datetime.now(timezone.utc)
        month_start = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        
        summary = {
            "organization_stats": {},
            "today_stats": {},
            "month_stats": {},
            "user_specific": {}
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        summary["organization_stats"] = {
            "total_properties": db.query(Property).filter(
                Property.organization_id == organization_id
            ).count(),
            "active_rentals": db.query(Rental).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.is_active == True
                )
            ).count(),
            "total_clients": db.query(Client).filter(
                Client.organization_id == organization_id
            ).count(),
            "total_staff": db.query(User).filter(
                User.organization_id == organization_id
            ).count()
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_start = today.replace(hour=0, minute=0, second=0, microsecond=0)
        today_end = today_start + timedelta(days=1)
        
        summary["today_stats"] = {
            "new_bookings": db.query(Rental).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.created_at >= today_start,
                    Rental.created_at < today_end
                )
            ).count(),
            "check_ins": db.query(Rental).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.check_in_time >= today_start,
                    Rental.check_in_time < today_end
                )
            ).count(),
            "check_outs": db.query(Rental).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.check_out_time >= today_start,
                    Rental.check_out_time < today_end
                )
            ).count(),
            "completed_tasks": db.query(Task).filter(
                and_(
                    Task.organization_id == organization_id,
                    Task.status == TaskStatus.COMPLETED,
                    Task.completed_at >= today_start,
                    Task.completed_at < today_end
                )
            ).count()
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü
        summary["month_stats"] = {
            "revenue": db.query(func.sum(Rental.paid_amount)).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.created_at >= month_start
                )
            ).scalar() or 0,
            "new_clients": db.query(Client).filter(
                and_(
                    Client.organization_id == organization_id,
                    Client.created_at >= month_start
                )
            ).count(),
            "occupancy_rate": ReportsService._calculate_occupancy_rate(
                db, organization_id, month_start, today
            )
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è —Ä–æ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if user_role in [UserRole.CLEANER, UserRole.TECHNICAL_STAFF]:
            # –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –∏—Ö –∑–∞–¥–∞—á–∏
            user_tasks = db.query(Task).filter(
                and_(
                    Task.organization_id == organization_id,
                    Task.status.in_([TaskStatus.ASSIGNED, TaskStatus.IN_PROGRESS])
                )
            ).count()
            
            summary["user_specific"] = {
                "pending_tasks": user_tasks,
                "completed_today": db.query(Task).filter(
                    and_(
                        Task.organization_id == organization_id,
                        Task.status == TaskStatus.COMPLETED,
                        Task.completed_at >= today_start,
                        Task.completed_at < today_end
                    )
                ).count()
            }
        
        elif user_role == UserRole.ACCOUNTANT:
            # –î–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ - —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            summary["user_specific"] = {
                "unpaid_invoices": db.query(Rental).filter(
                    and_(
                        Rental.organization_id == organization_id,
                        Rental.paid_amount < Rental.total_amount
                    )
                ).count(),
                "pending_payrolls": db.query(Payroll).filter(
                    and_(
                        Payroll.organization_id == organization_id,
                        Payroll.is_paid == False
                    )
                ).count()
            }
        
        return summary
    
    @staticmethod
    def _calculate_occupancy_rate(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> float:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–π"""
        
        print(f"üìä –†–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è
        active_properties = db.query(Property).filter(
            and_(
                Property.organization_id == organization_id,
                Property.is_active == True
            )
        ).all()
        
        total_properties = len(active_properties)
        print(f"üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π: {total_properties}")
        
        if total_properties == 0:
            return 0.0
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
        total_days = (end_date - start_date).days + 1  # +1 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
        if total_days <= 0:
            return 0.0
        
        print(f"üìÖ –î–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ: {total_days}")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π (–ø–æ–º–µ—â–µ–Ω–∏—è √ó –¥–Ω–∏)
        total_available_days = total_properties * total_days
        print(f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π: {total_available_days}")
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –¥–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è
        total_occupied_days = 0
        
        for prop in active_properties:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–º–µ—â–µ–Ω–∏—è: {prop.name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–µ–Ω–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –ø–µ—Ä–∏–æ–¥–æ–º
            rentals = db.query(Rental).filter(
                and_(
                    Rental.property_id == prop.id,
                    Rental.organization_id == organization_id,
                    # –ê—Ä–µ–Ω–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                    Rental.start_date < end_date,
                    Rental.end_date > start_date
                )
            ).all()
            
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ –∞—Ä–µ–Ω–¥ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è: {len(rentals)}")
            
            property_occupied_days = 0
            rental_periods = []
            
            for rental in rentals:
                # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
                rental_start = rental.start_date.replace(tzinfo=None) if rental.start_date.tzinfo else rental.start_date
                rental_end = rental.end_date.replace(tzinfo=None) if rental.end_date.tzinfo else rental.end_date
                period_start = start_date.replace(tzinfo=None) if start_date.tzinfo else start_date
                period_end = end_date.replace(tzinfo=None) if end_date.tzinfo else end_date
                
                # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                overlap_start = max(rental_start, period_start)
                overlap_end = min(rental_end, period_end)
                
                if overlap_end > overlap_start:
                    overlap_days = (overlap_end - overlap_start).days + 1
                    rental_periods.append((overlap_start, overlap_end, overlap_days))
                    print(f"  ‚è∞ –ê—Ä–µ–Ω–¥–∞ {rental.id}: {overlap_start} - {overlap_end} ({overlap_days} –¥–Ω–µ–π)")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã –∞—Ä–µ–Ω–¥—ã 
            # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –¥–Ω–µ–π
            if rental_periods:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
                rental_periods.sort(key=lambda x: x[0])
                
                merged_periods = []
                current_start, current_end, _ = rental_periods[0]
                
                for start, end, _ in rental_periods[1:]:
                    if start <= current_end:
                        # –ü–µ—Ä–∏–æ–¥—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –∏–ª–∏ —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—Ç—Å—è - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                        current_end = max(current_end, end)
                    else:
                        # –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                        merged_periods.append((current_start, current_end))
                        current_start, current_end = start, end
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
                merged_periods.append((current_start, current_end))
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π
                for start, end in merged_periods:
                    period_days = (end - start).days + 1
                    property_occupied_days += period_days
                    print(f"  üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {start} - {end} ({period_days} –¥–Ω–µ–π)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è
            max_days_for_property = total_days
            if property_occupied_days > max_days_for_property:
                print(f"‚ö†Ô∏è –ó–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π ({property_occupied_days}) –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞ ({max_days_for_property}), –æ–±—Ä–µ–∑–∞–µ–º")
                property_occupied_days = max_days_for_property
            
            total_occupied_days += property_occupied_days
            print(f"  üéØ –ò—Ç–æ–≥–æ –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è: {property_occupied_days}")
        
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π: {total_occupied_days}")
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π: {total_available_days}")
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        occupancy_rate = (total_occupied_days / total_available_days) * 100
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 100%
        if occupancy_rate > 100:
            print(f"‚ö†Ô∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100% ({occupancy_rate:.2f}%), –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100%")
            occupancy_rate = 100.0
        
        print(f"üéØ –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {occupancy_rate:.2f}%")
        return round(occupancy_rate, 2)
    
    @staticmethod
    def generate_financial_pdf(
        report: FinancialSummaryReport,
        start_date: datetime,
        end_date: datetime
    ) -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            textColor=darkblue
        )
        
        story.append(Paragraph("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", title_style))
        story.append(Paragraph(f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        data = [
            ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–°—É–º–º–∞ (‚Ç∏)'],
            ['–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', f"{report.total_revenue:,.2f}"],
            ['–í—ã—Ä—É—á–∫–∞ –æ—Ç –∞—Ä–µ–Ω–¥—ã', f"{report.rental_revenue:,.2f}"],
            ['–í—ã—Ä—É—á–∫–∞ –æ—Ç –∑–∞–∫–∞–∑–æ–≤', f"{report.orders_revenue:,.2f}"],
            ['–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', f"{report.total_expenses:,.2f}"],
            ['–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª', f"{report.staff_expenses:,.2f}"],
            ['–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', f"{report.material_expenses:,.2f}"],
            ['–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', f"{report.net_profit:,.2f}"],
        ]
        
        table = Table(data, colWidths=[3*inch, 2*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ]))
        
        story.append(table)
        story.append(Spacer(1, 20))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        additional_data = [
            ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            ['–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–π', f"{report.occupancy_rate:.1f}%"],
            ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π', str(report.properties_count)],
            ['–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã', str(report.active_rentals)],
        ]
        
        additional_table = Table(additional_data, colWidths=[3*inch, 2*inch])
        additional_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        story.append(additional_table)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc.build(story)
        buffer.seek(0)
        
        return buffer.getvalue()
    
    @staticmethod
    def export_data_to_excel(
        db: Session,
        organization_id: uuid.UUID,
        data_type: str,
        start_date: datetime,
        end_date: datetime
    ) -> bytes:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        
        output = io.BytesIO()
        
        if data_type == "rentals":
            # –≠–∫—Å–ø–æ—Ä—Ç –∞—Ä–µ–Ω–¥
            rentals = db.query(Rental).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.created_at >= start_date,
                    Rental.created_at <= end_date
                )
            ).all()
            
            import xlsxwriter
            workbook = xlsxwriter.Workbook(output)
            worksheet = workbook.add_worksheet("–ê—Ä–µ–Ω–¥—ã")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                'ID', '–ü–æ–º–µ—â–µ–Ω–∏–µ', '–ö–ª–∏–µ–Ω—Ç', '–¢–∏–ø –∞—Ä–µ–Ω–¥—ã', '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞', 
                '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è', '–°—É–º–º–∞', '–û–ø–ª–∞—á–µ–Ω–æ', '–°—Ç–∞—Ç—É—Å'
            ]
            
            for col, header in enumerate(headers):
                worksheet.write(0, col, header)
            
            # –î–∞–Ω–Ω—ã–µ
            for row, rental in enumerate(rentals, 1):
                worksheet.write(row, 0, str(rental.id))
                worksheet.write(row, 1, rental.property.name if rental.property else "")
                worksheet.write(row, 2, f"{rental.client.first_name} {rental.client.last_name}" if rental.client else "")
                worksheet.write(row, 3, rental.rental_type.value)
                worksheet.write(row, 4, rental.start_date.strftime('%d.%m.%Y'))
                worksheet.write(row, 5, rental.end_date.strftime('%d.%m.%Y'))
                worksheet.write(row, 6, rental.total_amount)
                worksheet.write(row, 7, rental.paid_amount)
                worksheet.write(row, 8, "–ê–∫—Ç–∏–≤–Ω–∞" if rental.is_active else "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            workbook.close()
        
        elif data_type == "tasks":
            # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á
            tasks = db.query(Task).filter(
                and_(
                    Task.organization_id == organization_id,
                    Task.created_at >= start_date,
                    Task.created_at <= end_date
                )
            ).all()
            
            import xlsxwriter
            workbook = xlsxwriter.Workbook(output)
            worksheet = workbook.add_worksheet("–ó–∞–¥–∞—á–∏")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                'ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–°—Ç–∞—Ç—É—Å', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
                '–°–æ–∑–¥–∞–Ω–æ', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–û–ø–ª–∞—Ç–∞', '–†–µ–π—Ç–∏–Ω–≥'
            ]
            
            for col, header in enumerate(headers):
                worksheet.write(0, col, header)
            
            # –î–∞–Ω–Ω—ã–µ
            for row, task in enumerate(tasks, 1):
                worksheet.write(row, 0, str(task.id))
                worksheet.write(row, 1, task.title)
                worksheet.write(row, 2, task.task_type.value)
                worksheet.write(row, 3, task.priority.value)
                worksheet.write(row, 4, task.status.value)
                worksheet.write(row, 5, f"{task.assignee.first_name} {task.assignee.last_name}" if task.assignee else "")
                worksheet.write(row, 6, task.created_at.strftime('%d.%m.%Y %H:%M'))
                worksheet.write(row, 7, task.completed_at.strftime('%d.%m.%Y %H:%M') if task.completed_at else "")
                worksheet.write(row, 8, task.payment_amount or 0)
                worksheet.write(row, 9, task.quality_rating or "")
            
            workbook.close()
        
        elif data_type == "clients":
            # –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
            clients = db.query(Client).filter(
                and_(
                    Client.organization_id == organization_id,
                    Client.created_at >= start_date,
                    Client.created_at <= end_date
                )
            ).all()
            
            import xlsxwriter
            workbook = xlsxwriter.Workbook(output)
            worksheet = workbook.add_worksheet("–ö–ª–∏–µ–Ω—Ç—ã")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                'ID', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Email', '–ò—Å—Ç–æ—á–Ω–∏–∫',
                '–í—Å–µ–≥–æ –∞—Ä–µ–Ω–¥', '–û–±—â–∏–µ —Ç—Ä–∞—Ç—ã', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç'
            ]
            
            for col, header in enumerate(headers):
                worksheet.write(0, col, header)
            
            # –î–∞–Ω–Ω—ã–µ
            for row, client in enumerate(clients, 1):
                worksheet.write(row, 0, str(client.id))
                worksheet.write(row, 1, client.first_name)
                worksheet.write(row, 2, client.last_name)
                worksheet.write(row, 3, client.phone or "")
                worksheet.write(row, 4, client.email or "")
                worksheet.write(row, 5, client.source or "")
                worksheet.write(row, 6, client.total_rentals)
                worksheet.write(row, 7, client.total_spent)
                worksheet.write(row, 8, client.created_at.strftime('%d.%m.%Y'))
                worksheet.write(row, 9, client.last_visit.strftime('%d.%m.%Y') if client.last_visit else "")
            
            workbook.close()
        
        elif data_type == "payroll":
            # –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—Ä–ø–ª–∞—Ç
            payrolls = db.query(Payroll).filter(
                and_(
                    Payroll.organization_id == organization_id,
                    Payroll.period_start >= start_date,
                    Payroll.period_end <= end_date
                )
            ).all()
            
            import xlsxwriter
            workbook = xlsxwriter.Workbook(output)
            worksheet = workbook.add_worksheet("–ó–∞—Ä–ø–ª–∞—Ç—ã")
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = [
                '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ü–µ—Ä–∏–æ–¥ –Ω–∞—á–∞–ª–∞', '–ü–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã',
                '–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞', '–ß–∞—Å—ã', '–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ö –¥–æ–ø–ª–∞—Ç–µ –∑–∞ –∑–∞–¥–∞—á–∏',
                '–ü—Ä–µ–º–∏—è', '–ß–∞–µ–≤—ã–µ', '–î—Ä—É–≥–æ–π –¥–æ—Ö–æ–¥', '–í—ã—á–µ—Ç—ã', '–ù–∞–ª–æ–≥–∏',
                '–ë—Ä—É—Ç—Ç–æ', '–ù–µ—Ç—Ç–æ', '–í—ã–ø–ª–∞—á–µ–Ω–æ'
            ]
            
            for col, header in enumerate(headers):
                worksheet.write(0, col, header)
            
            # –î–∞–Ω–Ω—ã–µ
            for row, payroll in enumerate(payrolls, 1):
                worksheet.write(row, 0, f"{payroll.user.first_name} {payroll.user.last_name}" if payroll.user else "")
                worksheet.write(row, 1, payroll.period_start.strftime('%d.%m.%Y'))
                worksheet.write(row, 2, payroll.period_end.strftime('%d.%m.%Y'))
                worksheet.write(row, 3, payroll.payroll_type.value)
                worksheet.write(row, 4, payroll.base_rate or 0)
                worksheet.write(row, 5, payroll.hours_worked)
                worksheet.write(row, 6, payroll.tasks_completed)
                worksheet.write(row, 7, payroll.tasks_payment)
                worksheet.write(row, 8, payroll.bonus)
                worksheet.write(row, 9, payroll.tips)
                worksheet.write(row, 10, payroll.other_income)
                worksheet.write(row, 11, payroll.deductions)
                worksheet.write(row, 12, payroll.taxes)
                worksheet.write(row, 13, payroll.gross_amount)
                worksheet.write(row, 14, payroll.net_amount)
                worksheet.write(row, 15, "–î–∞" if payroll.is_paid else "–ù–µ—Ç")
            
            workbook.close()
        
        output.seek(0)
        return output.getvalue()
    
    @staticmethod
    def generate_monthly_summary_report(
        db: Session,
        organization_id: uuid.UUID,
        year: int,
        month: int
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Å—è—á–Ω–æ–≥–æ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞
        start_date = datetime(year, month, 1, tzinfo=timezone.utc)
        if month == 12:
            end_date = datetime(year + 1, 1, 1, tzinfo=timezone.utc)
        else:
            end_date = datetime(year, month + 1, 1, tzinfo=timezone.utc)
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        financial = ReportsService.generate_financial_summary(
            db, organization_id, start_date, end_date
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—è–º
        properties_stats = {}
        properties = db.query(Property).filter(
            Property.organization_id == organization_id
        ).all()
        
        for prop in properties:
            rentals_count = db.query(Rental).filter(
                and_(
                    Rental.property_id == prop.id,
                    Rental.created_at >= start_date,
                    Rental.created_at < end_date
                )
            ).count()
            
            revenue = db.query(func.sum(Rental.paid_amount)).filter(
                and_(
                    Rental.property_id == prop.id,
                    Rental.created_at >= start_date,
                    Rental.created_at < end_date
                )
            ).scalar() or 0
            
            properties_stats[prop.name] = {
                "rentals_count": rentals_count,
                "revenue": revenue,
                "status": prop.status.value
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        staff_stats = {}
        staff_members = db.query(User).filter(
            User.organization_id == organization_id
        ).all()
        
        for staff in staff_members:
            completed_tasks = db.query(Task).filter(
                and_(
                    Task.assigned_to == staff.id,
                    Task.status == TaskStatus.COMPLETED,
                    Task.completed_at >= start_date,
                    Task.completed_at < end_date
                )
            ).count()
            
            payroll = db.query(Payroll).filter(
                and_(
                    Payroll.user_id == staff.id,
                    Payroll.period_start >= start_date,
                    Payroll.period_end < end_date
                )
            ).first()
            
            staff_stats[f"{staff.first_name} {staff.last_name}"] = {
                "role": staff.role.value,
                "tasks_completed": completed_tasks,
                "salary": payroll.net_amount if payroll else 0
            }
        
        # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã –º–µ—Å—è—Ü–∞
        top_clients = db.query(
            Client.first_name,
            Client.last_name,
            func.sum(Rental.total_amount).label('total_spent')
        ).join(Rental).filter(
            and_(
                Client.organization_id == organization_id,
                Rental.created_at >= start_date,
                Rental.created_at < end_date
            )
        ).group_by(Client.id, Client.first_name, Client.last_name).order_by(
            desc('total_spent')
        ).limit(5).all()
        
        top_clients_data = [
            {
                "name": f"{client.first_name} {client.last_name}",
                "spent": float(client.total_spent)
            }
            for client in top_clients
        ]
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        prev_start = datetime(prev_year, prev_month, 1, tzinfo=timezone.utc)
        
        if prev_month == 12:
            prev_end = datetime(prev_year + 1, 1, 1, tzinfo=timezone.utc)
        else:
            prev_end = datetime(prev_year, prev_month + 1, 1, tzinfo=timezone.utc)
        
        prev_revenue = db.query(func.sum(Rental.paid_amount)).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.created_at >= prev_start,
                Rental.created_at < prev_end
            )
        ).scalar() or 0
        
        revenue_change = ((financial.total_revenue - prev_revenue) / prev_revenue * 100) if prev_revenue > 0 else 0
        
        return {
            "period": {
                "year": year,
                "month": month,
                "start_date": start_date,
                "end_date": end_date
            },
            "financial_summary": {
                "total_revenue": financial.total_revenue,
                "total_expenses": financial.total_expenses,
                "net_profit": financial.net_profit,
                "occupancy_rate": financial.occupancy_rate,
                "revenue_change_percent": round(revenue_change, 2)
            },
            "properties_performance": properties_stats,
            "staff_performance": staff_stats,
            "top_clients": top_clients_data,
            "key_metrics": {
                "new_bookings": db.query(Rental).filter(
                    and_(
                        Rental.organization_id == organization_id,
                        Rental.created_at >= start_date,
                        Rental.created_at < end_date
                    )
                ).count(),
                "new_clients": db.query(Client).filter(
                    and_(
                        Client.organization_id == organization_id,
                        Client.created_at >= start_date,
                        Client.created_at < end_date
                    )
                ).count(),
                "completed_tasks": db.query(Task).filter(
                    and_(
                        Task.organization_id == organization_id,
                        Task.status == TaskStatus.COMPLETED,
                        Task.completed_at >= start_date,
                        Task.completed_at < end_date
                    )
                ).count()
            }
        }
    
    @staticmethod
    def generate_custom_report(
        db: Session,
        organization_id: uuid.UUID,
        report_config: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        
        start_date = datetime.fromisoformat(report_config["start_date"])
        end_date = datetime.fromisoformat(report_config["end_date"])
        
        report_data = {
            "config": report_config,
            "period": {
                "start_date": start_date,
                "end_date": end_date
            },
            "sections": {}
        }
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
        if report_config.get("include_financial", False):
            financial = ReportsService.generate_financial_summary(
                db, organization_id, start_date, end_date
            )
            report_data["sections"]["financial"] = financial.dict()
        
        # –†–∞–∑–¥–µ–ª –ø–æ–º–µ—â–µ–Ω–∏–π
        if report_config.get("include_properties", False):
            property_filter = report_config.get("property_filter")
            
            if property_filter and property_filter.get("property_ids"):
                property_ids = [uuid.UUID(pid) for pid in property_filter["property_ids"]]
                properties_report = []
                
                for prop_id in property_ids:
                    occupancy = ReportsService.generate_property_occupancy_report(
                        db, organization_id, start_date, end_date, prop_id
                    )
                    if occupancy:
                        properties_report.extend(occupancy)
            else:
                properties_report = ReportsService.generate_property_occupancy_report(
                    db, organization_id, start_date, end_date
                )
            
            report_data["sections"]["properties"] = [prop.dict() for prop in properties_report]
        
        # –†–∞–∑–¥–µ–ª –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        if report_config.get("include_staff", False):
            staff_filter = report_config.get("staff_filter")
            role_filter = None
            user_filter = None
            
            if staff_filter:
                if staff_filter.get("role"):
                    role_filter = UserRole(staff_filter["role"])
                if staff_filter.get("user_id"):
                    user_filter = uuid.UUID(staff_filter["user_id"])
            
            staff_report = ReportsService.generate_employee_performance_report(
                db, organization_id, start_date, end_date, role_filter, user_filter
            )
            report_data["sections"]["staff"] = [emp.dict() for emp in staff_report]
        
        # –†–∞–∑–¥–µ–ª –∫–ª–∏–µ–Ω—Ç–æ–≤
        if report_config.get("include_clients", False):
            clients_report = ReportsService.generate_client_analytics_report(
                db, organization_id, start_date, end_date
            )
            report_data["sections"]["clients"] = clients_report.dict()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if report_config.get("include_metrics", False):
            metrics = {
                "total_bookings": db.query(Rental).filter(
                    and_(
                        Rental.organization_id == organization_id,
                        Rental.created_at >= start_date,
                        Rental.created_at <= end_date
                    )
                ).count(),
                "average_booking_value": db.query(func.avg(Rental.total_amount)).filter(
                    and_(
                        Rental.organization_id == organization_id,
                        Rental.created_at >= start_date,
                        Rental.created_at <= end_date
                    )
                ).scalar() or 0,
                "cancellation_rate": ReportsService._calculate_cancellation_rate(
                    db, organization_id, start_date, end_date
                ),
                "customer_satisfaction": ReportsService._calculate_avg_satisfaction(
                    db, organization_id, start_date, end_date
                )
            }
            report_data["sections"]["metrics"] = metrics
        
        return report_data
    
    @staticmethod
    def _calculate_cancellation_rate(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω"""
        
        total_bookings = db.query(Rental).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.created_at >= start_date,
                Rental.created_at <= end_date
            )
        ).count()
        
        if total_bookings == 0:
            return 0.0
        
        cancelled_bookings = db.query(Rental).filter(
            and_(
                Rental.organization_id == organization_id,
                Rental.created_at >= start_date,
                Rental.created_at <= end_date,
                Rental.is_active == False,
                Rental.notes.like('%–û—Ç–º–µ–Ω–µ–Ω–æ%')
            )
        ).count()
        
        return round((cancelled_bookings / total_bookings) * 100, 2)
    
    @staticmethod
    def _calculate_avg_satisfaction(
        db: Session,
        organization_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> Optional[float]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        
        # –û—Å–Ω–æ–≤—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        avg_rating = db.query(func.avg(Task.quality_rating)).filter(
            and_(
                Task.organization_id == organization_id,
                Task.status == TaskStatus.COMPLETED,
                Task.quality_rating.isnot(None),
                Task.completed_at >= start_date,
                Task.completed_at <= end_date
            )
        ).scalar()
        
        return round(avg_rating, 2) if avg_rating else None
    
    @staticmethod
    def generate_forecast_report(
        db: Session,
        organization_id: uuid.UUID,
        forecast_months: int = 3
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        end_date = datetime.now(timezone.utc)
        start_date = end_date - timedelta(days=365)
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_data = []
        current_date = start_date
        
        while current_date < end_date:
            month_end = current_date.replace(day=28) + timedelta(days=4)
            month_end = month_end - timedelta(days=month_end.day)
            
            month_revenue = db.query(func.sum(Rental.paid_amount)).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.created_at >= current_date,
                    Rental.created_at <= month_end
                )
            ).scalar() or 0
            
            month_bookings = db.query(Rental).filter(
                and_(
                    Rental.organization_id == organization_id,
                    Rental.created_at >= current_date,
                    Rental.created_at <= month_end
                )
            ).count()
            
            monthly_data.append({
                "month": current_date.strftime("%Y-%m"),
                "revenue": month_revenue,
                "bookings": month_bookings
            })
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
            if current_date.month == 12:
                current_date = current_date.replace(year=current_date.year + 1, month=1)
            else:
                current_date = current_date.replace(month=current_date.month + 1)
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        if len(monthly_data) >= 3:
            recent_months = monthly_data[-3:]
            avg_revenue = sum(m["revenue"] for m in recent_months) / len(recent_months)
            avg_bookings = sum(m["bookings"] for m in recent_months) / len(recent_months)
            
            # –¢—Ä–µ–Ω–¥ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            revenue_trend = (recent_months[-1]["revenue"] - recent_months[0]["revenue"]) / len(recent_months)
            bookings_trend = (recent_months[-1]["bookings"] - recent_months[0]["bookings"]) / len(recent_months)
        else:
            avg_revenue = monthly_data[-1]["revenue"] if monthly_data else 0
            avg_bookings = monthly_data[-1]["bookings"] if monthly_data else 0
            revenue_trend = 0
            bookings_trend = 0
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Å—è—Ü—ã
        forecast_data = []
        base_revenue = avg_revenue
        base_bookings = avg_bookings
        
        for i in range(1, forecast_months + 1):
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            forecast_month = (end_date.month + i - 1) % 12 + 1
            seasonal_multiplier = ReportsService._get_seasonal_multiplier_for_month(forecast_month)
            
            predicted_revenue = (base_revenue + revenue_trend * i) * seasonal_multiplier
            predicted_bookings = int((base_bookings + bookings_trend * i) * seasonal_multiplier)
            
            forecast_data.append({
                "month": forecast_month,
                "predicted_revenue": max(0, predicted_revenue),
                "predicted_bookings": max(0, predicted_bookings)
            })
        
        return {
            "historical_data": monthly_data,
            "forecast_data": forecast_data,
            "analysis": {
                "revenue_trend": "increasing" if revenue_trend > 0 else "decreasing" if revenue_trend < 0 else "stable",
                "bookings_trend": "increasing" if bookings_trend > 0 else "decreasing" if bookings_trend < 0 else "stable",
                "avg_monthly_revenue": avg_revenue,
                "avg_monthly_bookings": avg_bookings
            },
            "recommendations": ReportsService._generate_recommendations(
                monthly_data, forecast_data, revenue_trend, bookings_trend
            )
        }
    
    @staticmethod
    def _get_seasonal_multiplier_for_month(month: int) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –º–µ—Å—è—Ü–∞"""
        # –í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω: –∏—é–Ω—å-–∞–≤–≥—É—Å—Ç
        if month in [6, 7, 8]:
            return 1.3
        # –°—Ä–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω: –∞–ø—Ä–µ–ª—å-–º–∞–π, —Å–µ–Ω—Ç—è–±—Ä—å-–æ–∫—Ç—è–±—Ä—å
        elif month in [4, 5, 9, 10]:
            return 1.1
        # –ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω: –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã
        else:
            return 0.8
    
    @staticmethod
    def _generate_recommendations(
        historical_data: List[Dict],
        forecast_data: List[Dict],
        revenue_trend: float,
        bookings_trend: float
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        recommendations = []
        
        if revenue_trend < 0:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Ü–µ–Ω–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞")
            recommendations.append("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏—á–∏–Ω—ã —Å–Ω–∏–∂–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤")
        
        if bookings_trend < 0:
            recommendations.append("–£—Å–∏–ª—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–∏–ª–∏—è –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∞–∫—Ü–∏–∏")
        
        if len(historical_data) > 6:
            recent_avg = sum(m["revenue"] for m in historical_data[-3:]) / 3
            older_avg = sum(m["revenue"] for m in historical_data[-6:-3]) / 3
            
            if recent_avg > older_avg * 1.1:
                recommendations.append("–û—Ç–ª–∏—á–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
            elif recent_avg < older_avg * 0.9:
                recommendations.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        summer_months = [m for m in historical_data if int(m["month"].split("-")[1]) in [6, 7, 8]]
        winter_months = [m for m in historical_data if int(m["month"].split("-")[1]) in [12, 1, 2]]
        
        if summer_months and winter_months:
            summer_avg = sum(m["revenue"] for m in summer_months) / len(summer_months)
            winter_avg = sum(m["revenue"] for m in winter_months) / len(winter_months)
            
            if summer_avg > winter_avg * 1.5:
                recommendations.append("–í—ã—Å–æ–∫–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω")
        
        if not recommendations:
            recommendations.append("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫")
        
        return recommendations
    
    @staticmethod
    def _get_property_occupied_days(
        db: Session,
        property_id: uuid.UUID,
        start_date: datetime,
        end_date: datetime
    ) -> int:
        """
        –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–Ω—è—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            property_id: ID –ø–æ–º–µ—â–µ–Ω–∏—è
            start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
            end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä–µ–Ω–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        rentals = db.query(Rental).filter(
            and_(
                Rental.property_id == property_id,
                # –ê—Ä–µ–Ω–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                Rental.start_date < end_date,
                Rental.end_date > start_date
            )
        ).all()
        
        if not rentals:
            return 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        occupied_periods = []
        
        for rental in rentals:
            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            rental_start = rental.start_date.replace(tzinfo=None) if rental.start_date.tzinfo else rental.start_date
            rental_end = rental.end_date.replace(tzinfo=None) if rental.end_date.tzinfo else rental.end_date
            period_start = start_date.replace(tzinfo=None) if start_date.tzinfo else start_date
            period_end = end_date.replace(tzinfo=None) if end_date.tzinfo else end_date
            
            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã —Å –æ—Ç—á–µ—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
            overlap_start = max(rental_start, period_start)
            overlap_end = min(rental_end, period_end)
            
            if overlap_end > overlap_start:
                occupied_periods.append((overlap_start, overlap_end))
        
        if not occupied_periods:
            return 0
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –ø–µ—Ä–∏–æ–¥—ã —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
        occupied_periods.sort(key=lambda x: x[0])
        
        merged_periods = []
        current_start, current_end = occupied_periods[0]
        
        for start, end in occupied_periods[1:]:
            if start <= current_end:
                # –ü–µ—Ä–∏–æ–¥—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –∏–ª–∏ —Å–æ–ø—Ä–∏–∫–∞—Å–∞—é—Ç—Å—è - –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                current_end = max(current_end, end)
            else:
                # –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                merged_periods.append((current_start, current_end))
                current_start, current_end = start, end
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        merged_periods.append((current_start, current_end))
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –¥–Ω–µ–π
        total_occupied_days = 0
        for start, end in merged_periods:
            days = (end - start).days + 1  # +1 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            total_occupied_days += days
        
        return total_occupied_days