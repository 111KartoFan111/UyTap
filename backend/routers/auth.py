# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä auth.py —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

import traceback
from datetime import datetime, timezone
from typing import Annotated, Optional
from fastapi import APIRouter, Depends, HTTPException, status, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
import uuid
from models.database import get_db
from schemas.auth import (
    LoginRequest, LoginResponse, RefreshTokenRequest, RefreshTokenResponse,
    LogoutRequest, MessageResponse, UserResponse, ChangePasswordRequest,
    ResetPasswordRequest, ResetPasswordConfirm, SystemInitRequest
)
from services.auth_service import AuthService
from services.init_service import DatabaseInitService
from models.models import User, Organization, UserRole
from utils.dependencies import get_current_user, get_current_active_user
from utils.rate_limiter import RateLimiter


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = APIRouter(prefix="/api/auth", tags=["Authentication"])
security = HTTPBearer()
rate_limiter = RateLimiter()


def get_client_info(request: Request) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
    return {
        "ip_address": request.client.host if request.client else "unknown",
        "user_agent": request.headers.get("user-agent", "unknown"),
        "device_info": {
            "platform": request.headers.get("sec-ch-ua-platform", "unknown"),
            "mobile": request.headers.get("sec-ch-ua-mobile") == "?1"
        }
    }


@router.post("/system/init", response_model=MessageResponse)
async def initialize_system(
    request: Request,
    init_data: SystemInitRequest,
    db: Session = Depends(get_db)
):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–µ—Ä–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    try:
        client_info = get_client_info(request)
        
        print(f"üîç System initialization attempt from {client_info['ip_address']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–∞
        if DatabaseInitService.is_database_initialized(db):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="System is already initialized"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not rate_limiter.check_rate_limit(
            f"system_init:{client_info['ip_address']}", 
            max_requests=3, 
            window_seconds=3600  # 3 –ø–æ–ø—ã—Ç–∫–∏ –≤ —á–∞—Å
        ):
            print(f"‚ùå Rate limit exceeded for system init from {client_info['ip_address']}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Too many system initialization attempts. Please try again later."
            )
        
        print(f"üîç Initializing system...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        result = DatabaseInitService.initialize_system(db, init_data)
        
        print(f"‚úÖ System initialized successfully")
        print(f"‚úÖ Organization: {result['organization']['name']}")
        print(f"‚úÖ System Admin: {result['system_admin']['email']}")
        print(f"‚úÖ Org Admin: {result['org_admin']['email']}")
        
        return MessageResponse(
            message="System initialized successfully",
            success=True
        )
        
    except HTTPException as http_ex:
        print(f"‚ùå HTTP Exception: {http_ex.status_code} - {http_ex.detail}")
        raise
    except Exception as e:
        print(f"‚ùå Unexpected error in system init: {str(e)}")
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error during system initialization: {str(e)}"
        )


@router.get("/system/status")
async def get_system_status(db: Session = Depends(get_db)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    try:
        is_initialized = DatabaseInitService.is_database_initialized(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        org_count = db.query(Organization).count()
        user_count = db.query(User).count()
        
        return {
            "initialized": is_initialized,
            "organizations_count": org_count,
            "users_count": user_count,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
    except Exception as e:
        print(f"‚ùå Error checking system status: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error checking system status"
        )


@router.post("/login", response_model=LoginResponse)
async def login(
    request: Request,
    login_data: LoginRequest,
    db: Session = Depends(get_db)
):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    try:
        client_info = get_client_info(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"üîç Login attempt for email: {login_data.email}")
        print(f"üîç Organization slug: {login_data.organization_slug}")
        print(f"üîç Client info: {client_info}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not rate_limiter.check_rate_limit(
            f"login:{client_info['ip_address']}", 
            max_requests=5, 
            window_seconds=300  # 5 –ø–æ–ø—ã—Ç–æ–∫ –≤ 5 –º–∏–Ω—É—Ç
        ):
            print(f"‚ùå Rate limit exceeded for {client_info['ip_address']}")
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Too many login attempts. Please try again later."
            )
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"üîç Attempting authentication...")
        user = AuthService.authenticate_user(
            db=db,
            email=login_data.email,
            password=login_data.password,
            organization_slug=login_data.organization_slug
        )
        
        print(f"üîç Authentication result: {user is not None}")
        
        if not user:
            print(f"‚ùå Authentication failed for {login_data.email}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
            org = None
            if login_data.organization_slug:
                org = db.query(Organization).filter(
                    Organization.slug == login_data.organization_slug
                ).first()
                print(f"üîç Organization found: {org is not None}")
            
            try:
                AuthService.log_login_attempt(
                    db=db,
                    email=login_data.email,
                    success=False,
                    organization_id=org.id if org else None,
                    failure_reason="invalid_credentials",
                    ip_address=client_info["ip_address"],
                    user_agent=client_info["user_agent"]
                )
            except Exception as log_error:
                print(f"‚ö†Ô∏è Failed to log login attempt: {log_error}")
            
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Incorrect email or password"
            )
        
        print(f"‚úÖ User authenticated: {user.email}, role: {user.role}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        print(f"üîç Creating tokens...")
        tokens = AuthService.create_user_tokens(
            db=db,
            user=user,
            device_info=login_data.device_info or client_info["device_info"],
            ip_address=client_info["ip_address"],
            user_agent=client_info["user_agent"]
        )
        
        print(f"‚úÖ Tokens created successfully")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
        try:
            AuthService.log_login_attempt(
                db=db,
                email=login_data.email,
                success=True,
                organization_id=user.organization_id,
                ip_address=client_info["ip_address"],
                user_agent=client_info["user_agent"]
            )
        except Exception as log_error:
            print(f"‚ö†Ô∏è Failed to log successful login: {log_error}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            AuthService.log_user_action(
                db=db,
                user_id=user.id,
                action="user_login",
                organization_id=user.organization_id,
                ip_address=client_info["ip_address"],
                user_agent=client_info["user_agent"]
            )
        except Exception as log_error:
            print(f"‚ö†Ô∏è Failed to log user action: {log_error}")
        
        print(f"‚úÖ Login successful for {user.email}")
        
        return LoginResponse(
            access_token=tokens["access_token"],
            refresh_token=tokens["refresh_token"],
            token_type=tokens["token_type"],
            expires_in=tokens["expires_in"],
            user=UserResponse.model_validate(user)
        )
        
    except HTTPException as http_ex:
        print(f"‚ùå HTTP Exception: {http_ex.status_code} - {http_ex.detail}")
        raise
    except Exception as e:
        print(f"‚ùå Unexpected error in login: {str(e)}")
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error during login: {str(e)}"
        )


@router.post("/refresh", response_model=RefreshTokenResponse)
async def refresh_token(
    request: Request,
    refresh_data: RefreshTokenRequest,
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞"""
    
    try:
        client_info = get_client_info(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not rate_limiter.check_rate_limit(
            f"refresh:{client_info['ip_address']}", 
            max_requests=10, 
            window_seconds=300  # 10 –ø–æ–ø—ã—Ç–æ–∫ –≤ 5 –º–∏–Ω—É—Ç
        ):
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Too many token refresh attempts. Please try again later."
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        tokens = AuthService.refresh_access_token(db, refresh_data.refresh_token)
        
        if not tokens:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid or expired refresh token"
            )
        
        return RefreshTokenResponse(
            access_token=tokens["access_token"],
            refresh_token=tokens["refresh_token"],
            token_type=tokens["token_type"],
            expires_in=tokens["expires_in"]
        )
        
    except HTTPException as http_ex:
        raise
    except Exception as e:
        print(f"‚ùå Unexpected error in token refresh: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error during token refresh"
        )


@router.post("/logout", response_model=MessageResponse)
async def logout(
    request: Request,
    logout_data: LogoutRequest,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    
    try:
        client_info = get_client_info(request)
        
        # –û—Ç–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
        AuthService.revoke_refresh_token(
            db=db,
            user_id=current_user.id,
            refresh_token=logout_data.refresh_token,
            revoke_all=logout_data.logout_all_devices,
            reason="user_logout"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        AuthService.log_user_action(
            db=db,
            user_id=current_user.id,
            action="user_logout",
            organization_id=current_user.organization_id,
            details={"logout_all_devices": logout_data.logout_all_devices},
            ip_address=client_info["ip_address"],
            user_agent=client_info["user_agent"]
        )
        
        return MessageResponse(
            message="Successfully logged out",
            success=True
        )
        
    except Exception as e:
        print(f"‚ùå Error during logout: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error during logout"
        )


@router.get("/me", response_model=UserResponse)
async def get_current_user_info(
    current_user: User = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return UserResponse.model_validate(current_user)