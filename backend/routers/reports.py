# backend/routers/reports.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from datetime import datetime, timezone, timedelta
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, Query, Response
from fastapi.responses import FileResponse, StreamingResponse
from sqlalchemy.orm import Session
import uuid
import io
import xlsxwriter
import tempfile
import os

from models.database import get_db
from models.models import User, UserRole
from schemas.reports import (
    FinancialSummaryReport, PropertyOccupancyReport, 
    EmployeePerformanceReport, ClientAnalyticsReport
)
from utils.dependencies import get_current_active_user
from services.auth_service import AuthService
from services.reports_service import ReportsService
from models.extended_models import Payroll,Task,TaskStatus
from models.models import Organization
from sqlalchemy import and_, desc, or_ 


router = APIRouter(prefix="/api/reports", tags=["Reports"])


@router.get("/financial-summary", response_model=FinancialSummaryReport)
async def get_financial_summary(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to view financial reports"
        )
    
    report = ReportsService.generate_financial_summary(
        db=db,
        organization_id=current_user.organization_id,
        start_date=start_date,
        end_date=end_date
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
    AuthService.log_user_action(
        db=db,
        user_id=current_user.id,
        action="financial_report_viewed",
        organization_id=current_user.organization_id,
        details={
            "start_date": start_date.isoformat(),
            "end_date": end_date.isoformat()
        }
    )
    
    return report


@router.get("/property-occupancy", response_model=List[PropertyOccupancyReport])
async def get_property_occupancy(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    property_id: Optional[str] = None,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–π"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to view occupancy reports"
        )
    
    property_uuid = uuid.UUID(property_id) if property_id else None
    
    report = ReportsService.generate_property_occupancy_report(
        db=db,
        organization_id=current_user.organization_id,
        start_date=start_date,
        end_date=end_date,
        property_id=property_uuid
    )
    
    return report


@router.get("/employee-performance", response_model=List[EmployeePerformanceReport])
async def get_employee_performance(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    role: Optional[UserRole] = None,
    user_id: Optional[str] = None,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to view employee reports"
        )
    
    # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if user_id and current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.SYSTEM_OWNER]:
        if uuid.UUID(user_id) != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Can only view your own performance"
            )
    
    user_uuid = uuid.UUID(user_id) if user_id else None
    
    report = ReportsService.generate_employee_performance_report(
        db=db,
        organization_id=current_user.organization_id,
        start_date=start_date,
        end_date=end_date,
        role=role,
        user_id=user_uuid
    )
    
    return report


@router.get("/client-analytics", response_model=ClientAnalyticsReport)
async def get_client_analytics(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to view client analytics"
        )
    
    report = ReportsService.generate_client_analytics_report(
        db=db,
        organization_id=current_user.organization_id,
        start_date=start_date,
        end_date=end_date
    )
    
    return report


@router.get("/my-payroll")
async def get_my_payroll(
    period_start: Optional[datetime] = None,
    period_end: Optional[datetime] = None,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–µ–¥–æ–º–æ—Å—Ç—å"""

    now = datetime.now(timezone.utc)

    if not period_start:
        period_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)

    if not period_end:
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
        if period_start.month == 12:
            period_end = period_start.replace(
                year=period_start.year + 1, month=1
            )
        else:
            period_end = period_start.replace(month=period_start.month + 1)

        period_end = period_end - timedelta(microseconds=1)  # –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞

    # üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å
    print("üí¨ period_start:", period_start)
    print("üí¨ period_end:", period_end)

    payroll = ReportsService.get_user_payroll(
        db=db,
        user_id=current_user.id,
        period_start=period_start,
        period_end=period_end
    )

    return payroll

@router.get("/financial-summary/export")
async def export_financial_summary(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    format: str = Query("xlsx", regex="^(xlsx|pdf)$"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to export financial reports"
        )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = ReportsService.generate_financial_summary(
            db=db,
            organization_id=current_user.organization_id,
            start_date=start_date,
            end_date=end_date
        )
        
        filename = f"financial_report_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.{format}"
        
        if format == "xlsx":
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            output = io.BytesIO()
            workbook = xlsxwriter.Workbook(output, {'in_memory': True})
            worksheet = workbook.add_worksheet("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç")
            
            # –°—Ç–∏–ª–∏
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#D7E4BC',
                'border': 1,
                'align': 'center'
            })
            money_format = workbook.add_format({'num_format': '#,##0.00" ‚Ç∏"'})
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            worksheet.write('A1', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç', header_format)
            worksheet.write('A2', f'–ü–µ—Ä–∏–æ–¥: {start_date.strftime("%d.%m.%Y")} - {end_date.strftime("%d.%m.%Y")}')
            
            # –î–∞–Ω–Ω—ã–µ
            row = 4
            worksheet.write(row, 0, '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', header_format)
            worksheet.write(row, 1, '–°—É–º–º–∞', header_format)
            
            row += 1
            worksheet.write(row, 0, '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞')
            worksheet.write(row, 1, report.total_revenue, money_format)
            
            row += 1
            worksheet.write(row, 0, '–í—ã—Ä—É—á–∫–∞ –æ—Ç –∞—Ä–µ–Ω–¥—ã')
            worksheet.write(row, 1, report.rental_revenue, money_format)
            
            row += 1
            worksheet.write(row, 0, '–í—ã—Ä—É—á–∫–∞ –æ—Ç –∑–∞–∫–∞–∑–æ–≤')
            worksheet.write(row, 1, report.orders_revenue, money_format)
            
            row += 1
            worksheet.write(row, 0, '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã')
            worksheet.write(row, 1, report.total_expenses, money_format)
            
            row += 1
            worksheet.write(row, 0, '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª')
            worksheet.write(row, 1, report.staff_expenses, money_format)
            
            row += 1
            worksheet.write(row, 0, '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã')
            worksheet.write(row, 1, report.material_expenses, money_format)
            
            row += 1
            worksheet.write(row, 0, '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å')
            worksheet.write(row, 1, report.net_profit, money_format)
            
            row += 2
            worksheet.write(row, 0, '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å', header_format)
            worksheet.write(row, 1, f'{report.occupancy_rate:.1f}%')
            
            row += 1
            worksheet.write(row, 0, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–µ—â–µ–Ω–∏–π')
            worksheet.write(row, 1, report.properties_count)
            
            row += 1
            worksheet.write(row, 0, '–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã')
            worksheet.write(row, 1, report.active_rentals)
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            worksheet.set_column('A:A', 25)
            worksheet.set_column('B:B', 15)
            
            workbook.close()
            output.seek(0)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            AuthService.log_user_action(
                db=db,
                user_id=current_user.id,
                action="financial_report_exported",
                organization_id=current_user.organization_id,
                details={
                    "format": format,
                    "start_date": start_date.isoformat(),
                    "end_date": end_date.isoformat()
                }
            )
            
            return Response(
                content=output.getvalue(),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
        
        elif format == "pdf":
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            organization = db.query(Organization).get(current_user.organization_id)
            organization_name = organization.name if organization else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"

            pdf_content = ReportsService.generate_financial_pdf(
                report=report,
                start_date=start_date,
                end_date=end_date,
                organization_name=organization_name,
                user_fullname=current_user.first_name + " " + current_user.last_name
            )
            
            return Response(
                content=pdf_content,
                media_type="application/pdf",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to export report: {str(e)}"
        )


@router.get("/property-occupancy/export")
async def export_property_occupancy(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    property_id: Optional[str] = None,
    format: str = Query("xlsx", regex="^(xlsx|pdf)$"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏–π"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to export occupancy reports"
        )
    
    try:
        property_uuid = uuid.UUID(property_id) if property_id else None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = ReportsService.generate_property_occupancy_report(
            db=db,
            organization_id=current_user.organization_id,
            start_date=start_date,
            end_date=end_date,
            property_id=property_uuid
        )
        
        filename = f"property_occupancy_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.{format}"
        
        if format == "xlsx":
            output = io.BytesIO()
            workbook = xlsxwriter.Workbook(output, {'in_memory': True})
            worksheet = workbook.add_worksheet("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–º–µ—â–µ–Ω–∏–π")
            
            # –°—Ç–∏–ª–∏
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#D7E4BC',
                'border': 1,
                'align': 'center'
            })
            percent_format = workbook.add_format({'num_format': '0.00"%"'})
            money_format = workbook.add_format({'num_format': '#,##0.00" ‚Ç∏"'})
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['–ü–æ–º–µ—â–µ–Ω–∏–µ', '–ù–æ–º–µ—Ä', '–í—Å–µ–≥–æ –¥–Ω–µ–π', '–ó–∞–Ω—è—Ç–æ –¥–Ω–µ–π', '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å %', '–í—ã—Ä—É—á–∫–∞']
            for col, header in enumerate(headers):
                worksheet.write(0, col, header, header_format)
            
            # –î–∞–Ω–Ω—ã–µ
            for row, prop in enumerate(report, 1):
                worksheet.write(row, 0, prop.property_name)
                worksheet.write(row, 1, prop.property_number)
                worksheet.write(row, 2, prop.total_days)
                worksheet.write(row, 3, prop.occupied_days)
                worksheet.write(row, 4, prop.occupancy_rate / 100, percent_format)
                worksheet.write(row, 5, prop.revenue, money_format)
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
            worksheet.set_column('A:A', 20)
            worksheet.set_column('B:B', 10)
            worksheet.set_column('C:D', 12)
            worksheet.set_column('E:E', 15)
            worksheet.set_column('F:F', 15)
            
            workbook.close()
            output.seek(0)
            
            return Response(
                content=output.getvalue(),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to export occupancy report: {str(e)}"
        )


@router.get("/client-analytics/export")
async def export_client_analytics(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    format: str = Query("xlsx", regex="^(xlsx|pdf)$"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to export client analytics"
        )
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = ReportsService.generate_client_analytics_report(
            db=db,
            organization_id=current_user.organization_id,
            start_date=start_date,
            end_date=end_date
        )
        
        filename = f"client_analytics_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.{format}"
        
        if format == "xlsx":
            output = io.BytesIO()
            workbook = xlsxwriter.Workbook(output, {'in_memory': True})
            worksheet = workbook.add_worksheet("–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
            # –°—Ç–∏–ª–∏
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#D7E4BC',
                'border': 1,
                'align': 'center'
            })
            money_format = workbook.add_format({'num_format': '#,##0.00" ‚Ç∏"'})
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            row = 0
            worksheet.write(row, 0, '–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', header_format)
            worksheet.write(row, 1, f'–ü–µ—Ä–∏–æ–¥: {start_date.strftime("%d.%m.%Y")} - {end_date.strftime("%d.%m.%Y")}')
            
            row += 2
            worksheet.write(row, 0, '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', header_format)
            worksheet.write(row, 1, '–ó–Ω–∞—á–µ–Ω–∏–µ', header_format)
            
            stats = [
                ('–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤', report.total_clients),
                ('–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', report.new_clients),
                ('–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', report.returning_clients),
                ('–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è (–¥–Ω–∏)', f'{report.average_stay_duration:.1f}'),
                ('–°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã', f'{report.average_spending:,.2f} ‚Ç∏')
            ]
            
            for stat_name, stat_value in stats:
                row += 1
                worksheet.write(row, 0, stat_name)
                worksheet.write(row, 1, stat_value)
            
            # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã
            if report.top_clients:
                row += 3
                worksheet.write(row, 0, '–¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã', header_format)
                row += 1
                worksheet.write(row, 0, '–ò–º—è', header_format)
                worksheet.write(row, 1, '–ü–æ—Ç—Ä–∞—á–µ–Ω–æ', header_format)
                worksheet.write(row, 2, '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è', header_format)
                
                for client in report.top_clients[:10]:
                    row += 1
                    worksheet.write(row, 0, client['client_name'])
                    worksheet.write(row, 1, client['spending'], money_format)
                    worksheet.write(row, 2, f"{client['stay_duration']:.1f} –¥–Ω–µ–π")
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
            if report.client_sources:
                row += 3
                worksheet.write(row, 0, '–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤', header_format)
                row += 1
                worksheet.write(row, 0, '–ò—Å—Ç–æ—á–Ω–∏–∫', header_format)
                worksheet.write(row, 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', header_format)
                
                for source, count in report.client_sources.items():
                    row += 1
                    worksheet.write(row, 0, source)
                    worksheet.write(row, 1, count)
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
            worksheet.set_column('A:A', 30)
            worksheet.set_column('B:B', 20)
            worksheet.set_column('C:C', 25)
            
            workbook.close()
            output.seek(0)
            
            return Response(
                content=output.getvalue(),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to export client analytics: {str(e)}"
        )


@router.get("/employee-performance/export")
async def export_employee_performance(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    role: Optional[UserRole] = None,
    user_id: Optional[str] = None,
    format: str = Query("xlsx", regex="^(xlsx|pdf)$"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to export employee reports"
        )
    
    try:
        user_uuid = uuid.UUID(user_id) if user_id else None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = ReportsService.generate_employee_performance_report(
            db=db,
            organization_id=current_user.organization_id,
            start_date=start_date,
            end_date=end_date,
            role=role,
            user_id=user_uuid
        )
        
        filename = f"employee_performance_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.{format}"
        
        if format == "xlsx":
            output = io.BytesIO()
            workbook = xlsxwriter.Workbook(output, {'in_memory': True})
            worksheet = workbook.add_worksheet("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            
            # –°—Ç–∏–ª–∏
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#D7E4BC',
                'border': 1,
                'align': 'center'
            })
            money_format = workbook.add_format({'num_format': '#,##0.00" ‚Ç∏"'})
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            headers = ['–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–†–æ–ª—å', '–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)', '–†–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞', '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ']
            for col, header in enumerate(headers):
                worksheet.write(0, col, header, header_format)
            
            # –î–∞–Ω–Ω—ã–µ
            for row, emp in enumerate(report, 1):
                worksheet.write(row, 0, emp.user_name)
                worksheet.write(row, 1, emp.role)
                worksheet.write(row, 2, emp.tasks_completed)
                worksheet.write(row, 3, emp.average_completion_time or 0)
                worksheet.write(row, 4, emp.quality_rating or 0)
                worksheet.write(row, 5, emp.earnings, money_format)
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
            worksheet.set_column('A:A', 20)
            worksheet.set_column('B:B', 15)
            worksheet.set_column('C:E', 12)
            worksheet.set_column('F:F', 15)
            
            workbook.close()
            output.seek(0)
            
            return Response(
                content=output.getvalue(),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid user ID format")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
        
    
@router.get("/debug/data-sources")
async def debug_report_data_sources(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions for debug information"
        )
    
    debug_info = ReportsService.debug_report_data(
        db=db,
        organization_id=current_user.organization_id,
        start_date=start_date,
        end_date=end_date
    )
    
    return debug_info


@router.get("/debug/employee-earnings/{user_id}")
async def debug_employee_earnings(
    user_id: str,
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions for debug information"
        )
    
    try:
        user_uuid = uuid.UUID(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = db.query(User).filter(
            and_(
                User.id == user_uuid,
                User.organization_id == current_user.organization_id
            )
        ).first()
        
        if not user:
            raise HTTPException(status_code=404, detail="User not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        payrolls = db.query(Payroll).filter(
            and_(
                Payroll.user_id == user_uuid,
                Payroll.organization_id == current_user.organization_id,
                or_(
                    and_(Payroll.period_start >= start_date, Payroll.period_end <= end_date),
                    and_(Payroll.period_start <= end_date, Payroll.period_end >= start_date)
                )
            )
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        tasks = db.query(Task).filter(
            and_(
                Task.assigned_to == user_uuid,
                Task.organization_id == current_user.organization_id,
                Task.completed_at >= start_date,
                Task.completed_at <= end_date,
                Task.status == TaskStatus.COMPLETED
            )
        ).all()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
        accurate_earnings = ReportsService.get_payroll_period_earnings(
            db, user_uuid, current_user.organization_id, start_date, end_date
        )
        
        debug_data = {
            "user_info": {
                "id": str(user.id),
                "name": f"{user.first_name} {user.last_name}",
                "role": user.role.value,
                "email": user.email
            },
            "period": {
                "start_date": start_date.isoformat(),
                "end_date": end_date.isoformat()
            },
            "payrolls": [
                {
                    "id": str(p.id),
                    "period_start": p.period_start.isoformat(),
                    "period_end": p.period_end.isoformat(),
                    "gross_amount": p.gross_amount,
                    "net_amount": p.net_amount,
                    "is_paid": p.is_paid,
                    "paid_at": p.paid_at.isoformat() if p.paid_at else None
                }
                for p in payrolls
            ],
            "tasks": [
                {
                    "id": str(t.id),
                    "title": t.title,
                    "completed_at": t.completed_at.isoformat() if t.completed_at else None,
                    "payment_amount": t.payment_amount or 0,
                    "is_paid": t.is_paid
                }
                for t in tasks
            ],
            "earnings_calculation": {
                "accurate_earnings": accurate_earnings,
                "payroll_total": sum(p.net_amount for p in payrolls if p.is_paid),
                "tasks_total": sum(t.payment_amount or 0 for t in tasks if t.is_paid),
                "payrolls_count": len(payrolls),
                "paid_payrolls_count": len([p for p in payrolls if p.is_paid]),
                "tasks_count": len(tasks)
            }
        }
        
        return debug_data
        
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid user ID format")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/general-statistics/export")
async def export_general_statistics(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    format: str = Query("xlsx", regex="^(xlsx|pdf)$"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to export general statistics"
        )
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        financial_report = ReportsService.generate_financial_summary(
            db=db, organization_id=current_user.organization_id,
            start_date=start_date, end_date=end_date
        )
        
        occupancy_report = ReportsService.generate_property_occupancy_report(
            db=db, organization_id=current_user.organization_id,
            start_date=start_date, end_date=end_date
        )
        
        client_report = ReportsService.generate_client_analytics_report(
            db=db, organization_id=current_user.organization_id,
            start_date=start_date, end_date=end_date
        )
        
        employee_report = ReportsService.generate_employee_performance_report(
            db=db, organization_id=current_user.organization_id,
            start_date=start_date, end_date=end_date
        )
        
        filename = f"general_statistics_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.{format}"
        
        if format == "xlsx":
            output = io.BytesIO()
            workbook = xlsxwriter.Workbook(output, {'in_memory': True})
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            summary_ws = workbook.add_worksheet("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            # –°—Ç–∏–ª–∏
            header_format = workbook.add_format({
                'bold': True, 'bg_color': '#D7E4BC', 'border': 1, 'align': 'center'
            })
            money_format = workbook.add_format({'num_format': '#,##0.00" ‚Ç∏"'})
            percent_format = workbook.add_format({'num_format': '0.00"%"'})
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            summary_ws.write('A1', '–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê', header_format)
            summary_ws.write('A2', f'–ü–µ—Ä–∏–æ–¥: {start_date.strftime("%d.%m.%Y")} - {end_date.strftime("%d.%m.%Y")}')
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            row = 4
            summary_ws.write(row, 0, '–§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', header_format)
            row += 1
            
            financial_data = [
                ('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', financial_report.total_revenue),
                ('–í—ã—Ä—É—á–∫–∞ –æ—Ç –∞—Ä–µ–Ω–¥—ã', financial_report.rental_revenue),
                ('–í—ã—Ä—É—á–∫–∞ –æ—Ç –∑–∞–∫–∞–∑–æ–≤', financial_report.orders_revenue),
                ('–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', financial_report.total_expenses),
                ('–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª', financial_report.staff_expenses),
                ('–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', financial_report.material_expenses),
                ('–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', financial_report.net_profit),
                ('–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)', (financial_report.net_profit / financial_report.total_revenue * 100) if financial_report.total_revenue > 0 else 0)
            ]
            
            for label, value in financial_data:
                summary_ws.write(row, 0, label)
                if '—Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å' in label.lower():
                    summary_ws.write(row, 1, value / 100, percent_format)
                else:
                    summary_ws.write(row, 1, value, money_format)
                row += 1
            
            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏–π
            row += 1
            summary_ws.write(row, 0, '–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ü–û–ú–ï–©–ï–ù–ò–ô', header_format)
            row += 1
            
            avg_occupancy = sum(p.occupancy_rate for p in occupancy_report) / len(occupancy_report) if occupancy_report else 0
            total_revenue_properties = sum(p.revenue for p in occupancy_report)
            
            property_data = [
                ('–í—Å–µ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏–π', len(occupancy_report)),
                ('–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å (%)', avg_occupancy),
                ('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –æ—Ç –ø–æ–º–µ—â–µ–Ω–∏–π', total_revenue_properties),
                ('–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã', financial_report.active_rentals)
            ]
            
            for label, value in property_data:
                summary_ws.write(row, 0, label)
                if '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å' in label.lower():
                    summary_ws.write(row, 1, value / 100, percent_format)
                elif isinstance(value, float) and '–≤—ã—Ä—É—á–∫–∞' in label.lower():
                    summary_ws.write(row, 1, value, money_format)
                else:
                    summary_ws.write(row, 1, value)
                row += 1
            
            # –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            row += 1
            summary_ws.write(row, 0, '–ö–õ–ò–ï–ù–¢–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', header_format)
            row += 1
            
            client_data = [
                ('–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤', client_report.total_clients),
                ('–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', client_report.new_clients),
                ('–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', client_report.returning_clients),
                ('–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', client_report.average_spending),
                ('–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è (–¥–Ω–∏)', client_report.average_stay_duration)
            ]
            
            for label, value in client_data:
                summary_ws.write(row, 0, label)
                if '—á–µ–∫' in label.lower() or '—Å—Ä–µ–¥–Ω' in label.lower() and '–¥–Ω–∏' not in label.lower():
                    summary_ws.write(row, 1, value, money_format)
                else:
                    summary_ws.write(row, 1, value)
                row += 1
            
            # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            row += 1
            summary_ws.write(row, 0, '–ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ü–ï–†–°–û–ù–ê–õ–ê', header_format)
            row += 1
            
            total_tasks = sum(emp.tasks_completed for emp in employee_report)
            total_earnings = sum(emp.earnings for emp in employee_report)
            avg_quality = sum(emp.quality_rating or 0 for emp in employee_report) / len([e for e in employee_report if e.quality_rating]) if employee_report else 0
            
            staff_data = [
                ('–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', len(employee_report)),
                ('–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á', total_tasks),
                ('–û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã', total_earnings),
                ('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞', avg_quality)
            ]
            
            for label, value in staff_data:
                summary_ws.write(row, 0, label)
                if '–≤—ã–ø–ª–∞—Ç—ã' in label.lower():
                    summary_ws.write(row, 1, value, money_format)
                else:
                    summary_ws.write(row, 1, value)
                row += 1
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            summary_ws.set_column('A:A', 35)
            summary_ws.set_column('B:B', 20)
            
            workbook.close()
            output.seek(0)
            
            return Response(
                content=output.getvalue(),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to export general statistics: {str(e)}"
        )


@router.get("/comparative-analysis/export")
async def export_comparative_analysis(
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    format: str = Query("xlsx", regex="^(xlsx|pdf)$"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to export comparative analysis"
        )
    
    try:
        # –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        current_report = ReportsService.generate_financial_summary(
            db=db, organization_id=current_user.organization_id,
            start_date=start_date, end_date=end_date
        )
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ (—Ç–∞–∫–æ–π –∂–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        period_duration = end_date - start_date
        prev_end_date = start_date - timedelta(days=1)
        prev_start_date = prev_end_date - period_duration
        
        previous_report = ReportsService.generate_financial_summary(
            db=db, organization_id=current_user.organization_id,
            start_date=prev_start_date, end_date=prev_end_date
        )
        
        filename = f"comparative_analysis_{start_date.strftime('%Y%m%d')}_{end_date.strftime('%Y%m%d')}.{format}"
        
        if format == "xlsx":
            output = io.BytesIO()
            workbook = xlsxwriter.Workbook(output, {'in_memory': True})
            worksheet = workbook.add_worksheet("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
            
            # –°—Ç–∏–ª–∏
            header_format = workbook.add_format({
                'bold': True, 'bg_color': '#D7E4BC', 'border': 1, 'align': 'center'
            })
            money_format = workbook.add_format({'num_format': '#,##0.00" ‚Ç∏"'})
            percent_format = workbook.add_format({'num_format': '0.00"%"'})
            positive_format = workbook.add_format({'color': 'green', 'bold': True})
            negative_format = workbook.add_format({'color': 'red', 'bold': True})
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            worksheet.write('A1', '–°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê', header_format)
            worksheet.write('A2', f'–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {start_date.strftime("%d.%m.%Y")} - {end_date.strftime("%d.%m.%Y")}')
            worksheet.write('A3', f'–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {prev_start_date.strftime("%d.%m.%Y")} - {prev_end_date.strftime("%d.%m.%Y")}')
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            headers = ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥', '–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ %']
            for col, header in enumerate(headers):
                worksheet.write(4, col, header, header_format)
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparison_data = [
                ('–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞', current_report.total_revenue, previous_report.total_revenue),
                ('–í—ã—Ä—É—á–∫–∞ –æ—Ç –∞—Ä–µ–Ω–¥—ã', current_report.rental_revenue, previous_report.rental_revenue),
                ('–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', current_report.total_expenses, previous_report.total_expenses),
                ('–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å', current_report.net_profit, previous_report.net_profit),
                ('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å (%)', current_report.occupancy_rate, previous_report.occupancy_rate),
                ('–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã', current_report.active_rentals, previous_report.active_rentals)
            ]
            
            row = 5
            for label, current_val, prev_val in comparison_data:
                worksheet.write(row, 0, label)
                
                # –¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
                if '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å' in label.lower():
                    worksheet.write(row, 1, current_val / 100, percent_format)
                    worksheet.write(row, 2, prev_val / 100, percent_format)
                elif isinstance(current_val, (int, float)) and '–∞—Ä–µ–Ω–¥—ã' not in label.lower():
                    worksheet.write(row, 1, current_val, money_format)
                    worksheet.write(row, 2, prev_val, money_format)
                else:
                    worksheet.write(row, 1, current_val)
                    worksheet.write(row, 2, prev_val)
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ
                change = current_val - prev_val
                change_percent = (change / prev_val * 100) if prev_val != 0 else 0
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                change_format = positive_format if change >= 0 else negative_format
                
                if '–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å' in label.lower():
                    worksheet.write(row, 3, change, change_format)
                elif isinstance(change, (int, float)) and '–∞—Ä–µ–Ω–¥—ã' not in label.lower():
                    worksheet.write(row, 3, change, money_format)
                else:
                    worksheet.write(row, 3, change, change_format)
                
                worksheet.write(row, 4, change_percent / 100, percent_format)
                
                row += 1
            
            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
            worksheet.set_column('A:A', 25)
            worksheet.set_column('B:E', 18)
            
            workbook.close()
            output.seek(0)
            
            return Response(
                content=output.getvalue(),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to export comparative analysis: {str(e)}"
        )
    
# –î–æ–±–∞–≤–∏—Ç—å –≤ backend/routers/reports.py

@router.get("/debug/earnings-strategies/{user_id}")
async def test_earnings_strategies(
    user_id: str,
    start_date: datetime = Query(...),
    end_date: datetime = Query(...),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Ä–∞—Å—á–µ—Ç–∞ earnings"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT, UserRole.SYSTEM_OWNER]:
        raise HTTPException(status_code=403, detail="Insufficient permissions")
    
    try:
        user_uuid = uuid.UUID(user_id)
        
        strategies_result = ReportsService.calculate_earnings_with_strategy(
            db=db,
            user_id=user_uuid,
            organization_id=current_user.organization_id,
            start_date=start_date,
            end_date=end_date
        )
        
        return {
            "user_id": user_id,
            "period": {
                "start_date": start_date.isoformat(),
                "end_date": end_date.isoformat()
            },
            "analysis": strategies_result,
            "recommendation": {
                "current_method": strategies_result["strategies"]["simple"],
                "improved_method": strategies_result["strategies"]["monthly_grouped"],
                "difference": strategies_result["strategies"]["monthly_grouped"] - strategies_result["strategies"]["simple"],
                "suggested_strategy": "monthly_grouped" if strategies_result["payrolls_count"] > 2 else "simple"
            }
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid user ID format")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/debug/cleanup-duplicate-payrolls")
async def cleanup_duplicate_payrolls(
    user_id: str,
    dry_run: bool = Query(True, description="–¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ"),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞—Ä–ø–ª–∞—Ç (–û–°–¢–û–†–û–ñ–ù–û!)"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.SYSTEM_OWNER]:
        raise HTTPException(status_code=403, detail="Only admins can cleanup payrolls")
    
    try:
        user_uuid = uuid.UUID(user_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_payrolls = db.query(Payroll).filter(
            and_(
                Payroll.user_id == user_uuid,
                Payroll.organization_id == current_user.organization_id
            )
        ).order_by(Payroll.period_start, desc(Payroll.net_amount), desc(Payroll.created_at)).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_groups = {}
        for payroll in all_payrolls:
            month_key = payroll.period_start.strftime("%Y-%m")
            if month_key not in monthly_groups:
                monthly_groups[month_key] = []
            monthly_groups[month_key].append(payroll)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates_to_remove = []
        kept_payrolls = []
        
        for month_key, month_payrolls in monthly_groups.items():
            if len(month_payrolls) > 1:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –∏ –Ω–æ–≤—É—é
                sorted_payrolls = sorted(
                    month_payrolls,
                    key=lambda p: (p.net_amount, p.created_at),
                    reverse=True
                )
                
                kept_payrolls.append(sorted_payrolls[0])
                duplicates_to_remove.extend(sorted_payrolls[1:])
            else:
                kept_payrolls.extend(month_payrolls)
        
        cleanup_result = {
            "user_id": user_id,
            "total_payrolls": len(all_payrolls),
            "duplicates_found": len(duplicates_to_remove),
            "will_keep": len(kept_payrolls),
            "dry_run": dry_run,
            "duplicates_details": [
                {
                    "id": str(p.id),
                    "period": f"{p.period_start} - {p.period_end}",
                    "amount": p.net_amount,
                    "created_at": p.created_at.isoformat()
                }
                for p in duplicates_to_remove
            ]
        }
        
        if not dry_run and duplicates_to_remove:
            # –†–ï–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï (–û–°–¢–û–†–û–ñ–ù–û!)
            for payroll in duplicates_to_remove:
                db.delete(payroll)
            
            db.commit()
            cleanup_result["deleted"] = len(duplicates_to_remove)
            cleanup_result["message"] = f"Deleted {len(duplicates_to_remove)} duplicate payrolls"
        else:
            cleanup_result["message"] = f"Found {len(duplicates_to_remove)} duplicates (dry run mode)"
        
        return cleanup_result
        
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid user ID format")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))