# backend/routers/payroll.py
from datetime import datetime, timezone, timedelta
from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, Query, Response, Path
from sqlalchemy.orm import Session
from sqlalchemy import and_, desc
import uuid

from models.database import get_db
from models.extended_models import Payroll, PayrollType, User, Task, TaskStatus
from schemas.payroll import PayrollCreate, PayrollUpdate, PayrollResponse
from models.models import User, UserRole
from services.auth_service import AuthService
from utils.dependencies import get_current_active_user
import uuid
from sqlalchemy.orm import Session
from sqlalchemy import and_, desc
from typing import List, Optional
from models.database import get_db
from schemas.payroll import PayrollCreate, PayrollUpdate, PayrollResponse
from models.extended_models import Payroll, PayrollType
from models.models import User, UserRole
from utils.dependencies import get_current_active_user


router = APIRouter(prefix="/api/payroll", tags=["Payroll"])


# backend/routers/payroll.py - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
@router.get("", response_model=List[PayrollResponse])
async def get_payrolls(
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=1000),
    user_id: Optional[str] = None,
    period_start: Optional[datetime] = None,
    period_end: Optional[datetime] = None,
    is_paid: Optional[bool] = None,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç–µ–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:
        # –û–±—ã—á–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤–µ–¥–æ–º–æ—Å—Ç–∏
        user_id = str(current_user.id)
    
    query = db.query(Payroll).filter(Payroll.organization_id == current_user.organization_id)
    
    # –§–∏–ª—å—Ç—Ä—ã
    if user_id:
        query = query.filter(Payroll.user_id == uuid.UUID(user_id))
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º —Å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ–º
    if period_start and period_end:
        # –ò—â–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        query = query.filter(
            and_(
                # –ü–µ—Ä–∏–æ–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                Payroll.period_start < period_end,
                Payroll.period_end > period_start
            )
        )
    elif period_start:
        # –ó–∞—Ä–ø–ª–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        query = query.filter(Payroll.period_end >= period_start)
    elif period_end:
        # –ó–∞—Ä–ø–ª–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        query = query.filter(Payroll.period_start <= period_end)
    
    if is_paid is not None:
        query = query.filter(Payroll.is_paid == is_paid)
    
    payrolls = query.order_by(desc(Payroll.period_start)).offset(skip).limit(limit).all()
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞—Ä–ø–ª–∞—Ç: {len(payrolls)} –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {period_start} - {period_end}")
    for p in payrolls:
        print(f"  üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ {p.id}: –ø–µ—Ä–∏–æ–¥ {p.period_start} - {p.period_end}, —Å—É–º–º–∞: {p.net_amount}")
    
    return payrolls

@router.post("/pay", response_model=PayrollResponse)
async def create_payroll(
    payroll_data: PayrollCreate,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–µ–¥–æ–º–æ—Å—Ç—å"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to create payroll records"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(
        and_(
            User.id == uuid.UUID(payroll_data.user_id),
            User.organization_id == current_user.organization_id
        )
    ).first()
    
    if not user:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="User not found"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
    existing_payroll = db.query(Payroll).filter(
        and_(
            Payroll.user_id == user.id,
            Payroll.period_start == payroll_data.period_start,
            Payroll.period_end == payroll_data.period_end
        )
    ).first()
    
    if existing_payroll:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Payroll record for this period already exists"
        )
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
    gross_amount = (
        (payroll_data.base_rate or 0) +
        payroll_data.tasks_payment +
        payroll_data.bonus +
        payroll_data.tips +
        payroll_data.other_income
    )
    
    net_amount = gross_amount - payroll_data.deductions - payroll_data.taxes
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–¥–æ–º–æ—Å—Ç—å
    data = payroll_data.dict()
    data["user_id"] = user.id
    payroll = Payroll(
        id=uuid.uuid4(),
        organization_id=current_user.organization_id,
        **data,
        gross_amount=gross_amount,
        net_amount=net_amount
    )

    
    db.add(payroll)
    db.commit()
    db.refresh(payroll)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    AuthService.log_user_action(
        db=db,
        user_id=current_user.id,
        action="payroll_created",
        organization_id=current_user.organization_id,
        resource_type="payroll",
        resource_id=payroll.id,
        details={
            "employee_name": f"{user.first_name} {user.last_name}",
            "period": f"{payroll_data.period_start} - {payroll_data.period_end}",
            "gross_amount": gross_amount,
            "net_amount": net_amount
        }
    )
    
    return payroll




@router.put("/{payroll_id}", response_model=PayrollResponse)
async def update_payroll(
    payroll_id: uuid.UUID,
    payroll_data: PayrollUpdate,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–µ–¥–æ–º–æ—Å—Ç—å"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to update payroll records"
        )
    
    payroll = db.query(Payroll).filter(
        and_(
            Payroll.id == payroll_id,
            Payroll.organization_id == current_user.organization_id
        )
    ).first()
    
    if not payroll:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Payroll record not found"
        )
    
    if payroll.is_paid:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Cannot update paid payroll record"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    update_data = payroll_data.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(payroll, field, value)
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
    payroll.gross_amount = (
        (payroll.base_rate or 0) +
        payroll.tasks_payment +
        payroll.bonus +
        payroll.tips +
        payroll.other_income
    )
    
    payroll.net_amount = payroll.gross_amount - payroll.deductions - payroll.taxes
    payroll.updated_at = datetime.now(timezone.utc)
    
    db.commit()
    db.refresh(payroll)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    AuthService.log_user_action(
        db=db,
        user_id=current_user.id,
        action="payroll_updated",
        organization_id=current_user.organization_id,
        resource_type="payroll",
        resource_id=payroll.id,
        details={"updated_fields": list(update_data.keys())}
    )
    
    return payroll


@router.post("/{payroll_id}/pay")
async def mark_payroll_paid(
    payroll_id: uuid.UUID,
    payment_method: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—É—é"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to mark payroll as paid"
        )
    
    payroll = db.query(Payroll).filter(
        and_(
            Payroll.id == payroll_id,
            Payroll.organization_id == current_user.organization_id
        )
    ).first()
    
    if not payroll:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Payroll record not found"
        )
    
    if payroll.is_paid:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Payroll is already marked as paid"
        )
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–Ω—É—é
    payroll.is_paid = True
    payroll.paid_at = datetime.now(timezone.utc)
    payroll.payment_method = payment_method
    payroll.updated_at = datetime.now(timezone.utc)
    
    db.commit()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    AuthService.log_user_action(
        db=db,
        user_id=current_user.id,
        action="payroll_paid",
        organization_id=current_user.organization_id,
        resource_type="payroll",
        resource_id=payroll.id,
        details={
            "payment_method": payment_method,
            "amount": payroll.net_amount
        }
    )
    
    return {"message": "Payroll marked as paid", "paid_at": payroll.paid_at}


@router.post("/calculate-monthly")
async def calculate_monthly_payroll(
    year: int = Query(..., ge=2020, le=2030),
    month: int = Query(..., ge=1, le=12),
    user_id: Optional[str] = None,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ –º–µ—Å—è—Ü"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to calculate payroll"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    period_start = datetime(year, month, 1, tzinfo=timezone.utc)
    if month == 12:
        period_end = datetime(year + 1, 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
    else:
        period_end = datetime(year, month + 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    query = db.query(User).filter(User.organization_id == current_user.organization_id)
    
    if user_id:
        query = query.filter(User.id == uuid.UUID(user_id))
    
    users = query.all()
    
    results = {
        "calculated": [],
        "errors": [],
        "period_start": period_start,
        "period_end": period_end
    }
    
    for user in users:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
            existing_payroll = db.query(Payroll).filter(
                and_(
                    Payroll.user_id == user.id,
                    Payroll.period_start == period_start,
                    Payroll.period_end == period_end
                )
            ).first()
            
            if existing_payroll:
                results["errors"].append({
                    "user_id": str(user.id),
                    "user_name": f"{user.first_name} {user.last_name}",
                    "error": "Payroll already calculated for this period"
                })
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            completed_tasks = db.query(Task).filter(
                and_(
                    Task.assigned_to == user.id,
                    Task.status == TaskStatus.COMPLETED,
                    Task.completed_at >= period_start,
                    Task.completed_at <= period_end,
                    Task.is_paid == True
                )
            ).all()
            
            tasks_payment = sum(task.payment_amount or 0 for task in completed_tasks)
            tasks_count = len(completed_tasks)
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            base_rates = {
                UserRole.ADMIN: 500000,
                UserRole.MANAGER: 400000,
                UserRole.ACCOUNTANT: 350000,
                UserRole.TECHNICAL_STAFF: 300000,
                UserRole.CLEANER: 250000,
                UserRole.STOREKEEPER: 280000
            }
            
            base_rate = base_rates.get(user.role, 200000)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—Ä–ø–ª–∞—Ç—ã
            if user.role in [UserRole.CLEANER, UserRole.TECHNICAL_STAFF]:
                payroll_type = PayrollType.PIECE_WORK
            else:
                payroll_type = PayrollType.MONTHLY_SALARY
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
            gross_amount = base_rate + tasks_payment
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –Ω–∞–ª–æ–≥–∏ (10% –ø–æ–¥–æ—Ö–æ–¥–Ω—ã–π + 10% —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–Ω–æ—Å—ã)
            taxes = gross_amount * 0.1
            social_tax = gross_amount * 0.1
            
            net_amount = gross_amount - taxes - social_tax
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
            payroll = Payroll(
                id=uuid.uuid4(),
                organization_id=current_user.organization_id,
                user_id=user.id,
                period_start=period_start,
                period_end=period_end,
                payroll_type=payroll_type,
                base_rate=base_rate,
                tasks_completed=tasks_count,
                tasks_payment=tasks_payment,
                bonus=0,
                tips=0,
                other_income=0,
                deductions=social_tax,
                taxes=taxes,
                gross_amount=gross_amount,
                net_amount=net_amount
            )
            
            db.add(payroll)
            
            results["calculated"].append({
                "user_id": str(user.id),
                "user_name": f"{user.first_name} {user.last_name}",
                "role": user.role.value,
                "base_rate": base_rate,
                "tasks_completed": tasks_count,
                "tasks_payment": tasks_payment,
                "gross_amount": gross_amount,
                "net_amount": net_amount
            })
            
        except Exception as e:
            results["errors"].append({
                "user_id": str(user.id),
                "user_name": f"{user.first_name} {user.last_name}",
                "error": str(e)
            })
    
    if results["calculated"]:
        db.commit()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    AuthService.log_user_action(
        db=db,
        user_id=current_user.id,
        action="monthly_payroll_calculated",
        organization_id=current_user.organization_id,
        details={
            "period": f"{year}-{month:02d}",
            "calculated_count": len(results["calculated"]),
            "errors_count": len(results["errors"])
        }
    )
    
    return results


@router.get("/statistics/overview")
async def get_payroll_statistics(
    year: int = Query(..., ge=2020, le=2030),
    month: Optional[int] = Query(None, ge=1, le=12),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to view payroll statistics"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    if month:
        period_start = datetime(year, month, 1, tzinfo=timezone.utc)
        if month == 12:
            period_end = datetime(year + 1, 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
        else:
            period_end = datetime(year, month + 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
    else:
        period_start = datetime(year, 1, 1, tzinfo=timezone.utc)
        period_end = datetime(year + 1, 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    payrolls = db.query(Payroll).filter(
        and_(
            Payroll.organization_id == current_user.organization_id,
            Payroll.period_start >= period_start,
            Payroll.period_end <= period_end
        )
    ).all()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_gross = sum(p.gross_amount for p in payrolls)
    total_net = sum(p.net_amount for p in payrolls)
    total_taxes = sum(p.taxes for p in payrolls)
    total_deductions = sum(p.deductions for p in payrolls)
    
    paid_payrolls = [p for p in payrolls if p.is_paid]
    unpaid_payrolls = [p for p in payrolls if not p.is_paid]
    
    total_paid = sum(p.net_amount for p in paid_payrolls)
    total_unpaid = sum(p.net_amount for p in unpaid_payrolls)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
    role_stats = {}
    for payroll in payrolls:
        role = payroll.user.role.value if payroll.user else "unknown"
        if role not in role_stats:
            role_stats[role] = {
                "count": 0,
                "total_gross": 0,
                "total_net": 0,
                "avg_gross": 0,
                "avg_net": 0
            }
        
        role_stats[role]["count"] += 1
        role_stats[role]["total_gross"] += payroll.gross_amount
        role_stats[role]["total_net"] += payroll.net_amount
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for role in role_stats:
        count = role_stats[role]["count"]
        if count > 0:
            role_stats[role]["avg_gross"] = role_stats[role]["total_gross"] / count
            role_stats[role]["avg_net"] = role_stats[role]["total_net"] / count
    
    return {
        "period": {
            "start": period_start,
            "end": period_end,
            "year": year,
            "month": month
        },
        "summary": {
            "total_employees": len(payrolls),
            "total_gross_amount": total_gross,
            "total_net_amount": total_net,
            "total_taxes": total_taxes,
            "total_deductions": total_deductions,
            "average_gross": total_gross / len(payrolls) if payrolls else 0,
            "average_net": total_net / len(payrolls) if payrolls else 0
        },
        "payment_status": {
            "paid_count": len(paid_payrolls),
            "unpaid_count": len(unpaid_payrolls),
            "total_paid_amount": total_paid,
            "total_unpaid_amount": total_unpaid,
            "payment_completion_rate": len(paid_payrolls) / len(payrolls) * 100 if payrolls else 0
        },
        "by_role": role_stats
    }


@router.get("/export/{format}")
async def export_payroll_data(
    format: str,
    year: int = Query(..., ge=2020, le=2030),
    month: Optional[int] = Query(None, ge=1, le=12),
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    
    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Insufficient permissions to export payroll data"
        )
    
    if format not in ["xlsx", "csv"]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Supported formats: xlsx, csv"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    if month:
        period_start = datetime(year, month, 1, tzinfo=timezone.utc)
        if month == 12:
            period_end = datetime(year + 1, 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
        else:
            period_end = datetime(year, month + 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
        filename = f"payroll_{year}_{month:02d}.{format}"
    else:
        period_start = datetime(year, 1, 1, tzinfo=timezone.utc)
        period_end = datetime(year + 1, 1, 1, tzinfo=timezone.utc) - timedelta(seconds=1)
        filename = f"payroll_{year}.{format}"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    payrolls = db.query(Payroll).filter(
        and_(
            Payroll.organization_id == current_user.organization_id,
            Payroll.period_start >= period_start,
            Payroll.period_end <= period_end
        )
    ).order_by(Payroll.period_start, Payroll.user_id).all()
    
    if format == "xlsx":
        from services.reports_service import ReportsService
        excel_data = ReportsService.export_data_to_excel(
            db=db,
            organization_id=current_user.organization_id,
            data_type="payroll",
            start_date=period_start,
            end_date=period_end
        )
        
        return Response(
            content=excel_data,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    
    elif format == "csv":
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ü–µ—Ä–∏–æ–¥ –Ω–∞—á–∞–ª–∞', '–ü–µ—Ä–∏–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è', '–¢–∏–ø –æ–ø–ª–∞—Ç—ã',
            '–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞', '–ß–∞—Å—ã', '–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ö –¥–æ–ø–ª–∞—Ç–µ –∑–∞ –∑–∞–¥–∞—á–∏',
            '–ü—Ä–µ–º–∏—è', '–ß–∞–µ–≤—ã–µ', '–î—Ä—É–≥–æ–π –¥–æ—Ö–æ–¥', '–í—ã—á–µ—Ç—ã', '–ù–∞–ª–æ–≥–∏',
            '–ë—Ä—É—Ç—Ç–æ', '–ù–µ—Ç—Ç–æ', '–í—ã–ø–ª–∞—á–µ–Ω–æ'
        ])
        
        # –î–∞–Ω–Ω—ã–µ
        for payroll in payrolls:
            writer.writerow([
                f"{payroll.user.first_name} {payroll.user.last_name}" if payroll.user else "",
                payroll.period_start.strftime('%d.%m.%Y'),
                payroll.period_end.strftime('%d.%m.%Y'),
                payroll.payroll_type.value,
                payroll.base_rate or 0,
                payroll.hours_worked,
                payroll.tasks_completed,
                payroll.tasks_payment,
                payroll.bonus,
                payroll.tips,
                payroll.other_income,
                payroll.deductions,
                payroll.taxes,
                payroll.gross_amount,
                payroll.net_amount,
                "–î–∞" if payroll.is_paid else "–ù–µ—Ç"
            ])
        
        output.seek(0)
        content = output.getvalue().encode('utf-8-sig')  # BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        
        return Response(
            content=content,
            media_type="text/csv; charset=utf-8",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
    

@router.get("/payID/{payroll_id}", response_model=PayrollResponse)
async def get_payroll(
    payroll_id: uuid.UUID,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω—É—é –≤–µ–¥–æ–º–æ—Å—Ç—å"""
    
    payroll = db.query(Payroll).filter(
        and_(
            Payroll.id == payroll_id,
            Payroll.organization_id == current_user.organization_id
        )
    ).first()
    
    if not payroll:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Payroll record not found"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT] 
        and payroll.user_id != current_user.id):
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied"
        )
    
    return payroll
