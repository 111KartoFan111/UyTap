from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from contextlib import asynccontextmanager
import os
import logging
import time

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from models.database import engine, SessionLocal
from models.models import Base
from routers import auth
from services.init_service import DatabaseInitService
from utils.logging_config import setup_logging
from utils.exceptions import (
    http_exception_handler,
    validation_exception_handler, 
    general_exception_handler
)
from utils.rate_limiter import RateLimiter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
rate_limiter = RateLimiter()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # Startup
    logger.info("üöÄ Starting Rental System API...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        logger.info("üìä Creating database tables...")
        success = DatabaseInitService.create_tables()
        
        if success:
            logger.info("‚úÖ Database tables created successfully")
        else:
            logger.error("‚ùå Failed to create database tables")
            raise Exception("Database table creation failed")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        with SessionLocal() as db:
            DatabaseInitService.run_database_migrations(db)
        
        logger.info("‚úÖ Database initialization completed")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
        with SessionLocal() as db:
            is_initialized = DatabaseInitService.is_database_initialized(db)
            if is_initialized:
                logger.info("‚úÖ System is already initialized")
            else:
                logger.warning("‚ö†Ô∏è  System needs to be initialized")
                logger.info("üìù Use POST /api/auth/system/init to initialize the system")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize database: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down Rental System API...")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with SessionLocal() as db:
            cleanup_result = DatabaseInitService.cleanup_old_data(db)
            logger.info(f"üßπ Cleanup completed: {cleanup_result}")
    except Exception as e:
        logger.error(f"‚ùå Cleanup failed: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Rental System API",
    description="""
    üè† **–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏**
    
    API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
    
    ## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    
    * üîê **–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è** —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏
    * üè¢ **–ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å** - –∏–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
    * üë• **–°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π** - –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ —É–±–æ—Ä—â–∏–∫–∞
    * üìä **–ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π** - –ø–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    * üõ°Ô∏è **Rate limiting** - –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π
    
    ## –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    * **System Owner** - –≤–ª–∞–¥–µ–ª–µ—Ü —Å–∏—Å—Ç–µ–º—ã
    * **Admin** - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å)
    * **Manager** - –º–µ–Ω–µ–¥–∂–µ—Ä
    * **Technical Staff** - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª
    * **Accountant** - –±—É—Ö–≥–∞–ª—Ç–µ—Ä
    * **Cleaner** - —É–±–æ—Ä—â–∏–∫
    * **Storekeeper** - –∫–ª–∞–¥–æ–≤—â–∏–∫
    
    ## –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bearer —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization:
    ```
    Authorization: Bearer <your_token>
    ```
    """,
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    openapi_url="/api/openapi.json",
    lifespan=lifespan
)

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1,0.0.0.0").split(",")
)

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=os.getenv("CORS_ORIGINS", "*").split(","),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üì• {request.method} {request.url.path} from {request.client.host}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    process_time = time.time() - start_time
    logger.info(f"üì§ {request.method} {request.url.path} completed in {process_time:.3f}s with status {response.status_code}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    response.headers["X-Process-Time"] = str(process_time)
    
    return response

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
app.add_exception_handler(StarletteHTTPException, http_exception_handler)
app.add_exception_handler(RequestValidationError, validation_exception_handler)
app.add_exception_handler(Exception, general_exception_handler)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router)

# –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
@app.get("/", tags=["Root"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint API"""
    return {
        "message": "üè† Rental System API",
        "version": "1.0.0",
        "docs": "/api/docs",
        "status": "üü¢ Online"
    }

# Health check endpoint
@app.get("/api/health", tags=["Health"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        with SessionLocal() as db:
            db.execute("SELECT 1")
        
        return {
            "status": "üü¢ Healthy",
            "database": "üü¢ Connected",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "üî¥ Unhealthy",
            "database": "üî¥ Disconnected",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
@app.get("/api/info", tags=["System"])
async def system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "name": "Rental System API",
        "version": "1.0.0",
        "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        "environment": os.getenv("ENVIRONMENT", "development"),
        "debug": os.getenv("DEBUG", "false").lower() == "true"
    }


if __name__ == "__main__":
    import uvicorn
    import sys
    import time
    from datetime import datetime
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=os.getenv("DEBUG", "false").lower() == "true",
        log_level="info"
    )