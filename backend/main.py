# backend/main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ò–ú–ü–û–†–¢–û–í

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from contextlib import asynccontextmanager
import os
import logging
import time
from fastapi import status


# –ë–ï–ó–û–ü–ê–°–ù–´–ï –ò–ú–ü–û–†–¢–´ –ú–û–î–ï–õ–ï–ô
try:
    from models.database import engine, SessionLocal
    from models.models import Base  # –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
    print("‚úÖ Base models imported successfully")
except Exception as e:
    print(f"‚ùå Error importing base models: {e}")
    raise

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    from models import extended_models
    print("‚úÖ Extended models imported successfully")
except Exception as e:
    print(f"‚ùå Error importing extended models: {e}")
    raise

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç
    from models import payroll_template, payroll_operation , acquiring_models
    print("‚úÖ Payroll models imported successfully")
except Exception as e:
    print(f"‚ö†Ô∏è  Warning: Payroll models not available: {e}")

# –ò–º–ø–æ—Ä—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤
try:
    from routers import (
        auth, admin, properties, rentals, clients, 
        orders, reports, documents, tasks, payroll, inventory, organization, payments,order_payments,export_reports,acquiring
    )
    print("‚úÖ Core routers imported successfully")
except Exception as e:
    print(f"‚ùå Error importing core routers: {e}")
    raise

try:
    # –ò–º–ø–æ—Ä—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∑–∞—Ä–ø–ª–∞—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    from routers import payroll_extended, admin_payroll, manager_payroll
    PAYROLL_EXTENDED_AVAILABLE = True
    print("‚úÖ Extended payroll routers imported successfully")
except Exception as e:
    print(f"‚ö†Ô∏è  Warning: Extended payroll routers not available: {e}")
    PAYROLL_EXTENDED_AVAILABLE = False

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from services.init_service import DatabaseInitService
from utils.logging_config import setup_logging
from utils.exceptions import (
    http_exception_handler,
    validation_exception_handler, 
    general_exception_handler
)
from utils.rate_limiter import RateLimiter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
rate_limiter = RateLimiter()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # Startup
    logger.info("üöÄ Starting Enhanced Rental System API...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        logger.info("üìä Creating database tables...")
        success = DatabaseInitService.create_tables()
        
        if success:
            logger.info("‚úÖ Database tables created successfully")
        else:
            logger.error("‚ùå Failed to create database tables")
            raise Exception("Database table creation failed")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        with SessionLocal() as db:
            DatabaseInitService.run_database_migrations(db)
        
        logger.info("‚úÖ Database initialization completed")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
        try:
            with SessionLocal() as db:
                is_initialized = DatabaseInitService.is_database_initialized(db)
                if is_initialized:
                    logger.info("‚úÖ System is already initialized")
                else:
                    logger.warning("‚ö†Ô∏è  System needs to be initialized")
                    logger.info("üìù Use POST /api/auth/system/init to initialize the system")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Could not check initialization status: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        try:
            from services.background_service import BackgroundService
            BackgroundService.start_scheduled_tasks()
            logger.info("‚úÖ Background tasks started")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Background tasks not started: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize application: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down Enhanced Rental System API...")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with SessionLocal() as db:
            cleanup_result = DatabaseInitService.cleanup_old_data(db)
            logger.info(f"üßπ Cleanup completed: {cleanup_result}")
    except Exception as e:
        logger.error(f"‚ùå Cleanup failed: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Enhanced Rental System API",
    description="""
    üè† **–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏**
    
    –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
    """,
    version="2.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc", 
    openapi_url="/api/openapi.json",
    lifespan=lifespan
)

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1,0.0.0.0").split(",")
)

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=os.getenv("CORS_ORIGINS", "*").split(","),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üì• {request.method} {request.url.path} from {request.client.host}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    process_time = time.time() - start_time
    logger.info(f"üì§ {request.method} {request.url.path} completed in {process_time:.3f}s with status {response.status_code}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    response.headers["X-Process-Time"] = str(process_time)
    
    return response

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
app.add_exception_handler(StarletteHTTPException, http_exception_handler)
app.add_exception_handler(RequestValidationError, validation_exception_handler)
app.add_exception_handler(Exception, general_exception_handler)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
logger.info("üîå Connecting routers...")

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(auth.router)
app.include_router(admin.router)
app.include_router(organization.router)
app.include_router(properties.router)
app.include_router(rentals.router)
app.include_router(clients.router)
app.include_router(orders.router)
app.include_router(reports.router)
app.include_router(documents.router)
app.include_router(tasks.router)
app.include_router(payroll.router)
app.include_router(inventory.router)
app.include_router(payments.router)
app.include_router(order_payments.router)
app.include_router(export_reports.router)
app.include_router(acquiring.router)


# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –∑–∞—Ä–ø–ª–∞—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
if PAYROLL_EXTENDED_AVAILABLE:
    app.include_router(payroll_extended.router)
    app.include_router(admin_payroll.router)
    app.include_router(manager_payroll.router)
    logger.info("‚úÖ Extended payroll routers connected")
else:
    logger.warning("‚ö†Ô∏è  Extended payroll routers not connected")

logger.info("‚úÖ All available routers connected")

# –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
@app.get("/", tags=["Root"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint API"""
    return {
        "message": "üè† Enhanced Rental System API",
        "version": "2.0.0",
        "docs": "/api/docs",
        "admin": "/admin",
        "status": "üü¢ Online",
        "features": [
            "üè¢ Property Management",
            "üë• Client Management", 
            "üìã Rental Management",
            "‚úÖ Task Management",
            "üõí Room Orders",
            "üí∞ Financial Reports",
            "üìÑ Document Management",
            "üìä Analytics & Reports",
            "üì¶ Inventory Management",
            "üîê Multi-tenant Security"
        ]
    }

# Health check endpoint
@app.get("/api/health", tags=["Health"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        with SessionLocal() as db:
            db.execute("SELECT 1")
        
        return {
            "status": "üü¢ Healthy",
            "database": "üü¢ Connected",
            "version": "2.0.0",
            "payroll_extended": "‚úÖ Available" if PAYROLL_EXTENDED_AVAILABLE else "‚ö†Ô∏è Limited",
            "modules": {
                "properties": "‚úÖ Active",
                "rentals": "‚úÖ Active", 
                "clients": "‚úÖ Active",
                "tasks": "‚úÖ Active",
                "orders": "‚úÖ Active",
                "reports": "‚úÖ Active",
                "documents": "‚úÖ Active",
                "inventory": "‚úÖ Active",
                "payroll": "‚úÖ Active",
                "payroll_extended": "‚úÖ Active" if PAYROLL_EXTENDED_AVAILABLE else "‚ö†Ô∏è Limited"
            }
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "üî¥ Unhealthy",
            "database": "üî¥ Disconnected",
            "error": str(e)
        }

# –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...


if __name__ == "__main__":
    import uvicorn
    import sys
    import time
    from datetime import datetime
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=os.getenv("DEBUG", "false").lower() == "true",
        log_level="info"
    )