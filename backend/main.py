# backend/main.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException
from contextlib import asynccontextmanager
import os
import logging
import time

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from models.database import engine, SessionLocal
from models.models import Base
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
from routers import (
    auth, admin, properties, rentals, clients, 
    orders, reports, documents, tasks, payroll, inventory,organization, payments
)
from services.init_service import DatabaseInitService
from utils.logging_config import setup_logging
from utils.exceptions import (
    http_exception_handler,
    validation_exception_handler, 
    general_exception_handler
)
from utils.rate_limiter import RateLimiter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiter
rate_limiter = RateLimiter()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # Startup
    logger.info("üöÄ Starting Enhanced Rental System API...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        logger.info("üìä Creating database tables...")
        success = DatabaseInitService.create_tables()
        
        if success:
            logger.info("‚úÖ Database tables created successfully")
        else:
            logger.error("‚ùå Failed to create database tables")
            raise Exception("Database table creation failed")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        with SessionLocal() as db:
            DatabaseInitService.run_database_migrations(db)
        
        logger.info("‚úÖ Database initialization completed")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
        with SessionLocal() as db:
            is_initialized = DatabaseInitService.is_database_initialized(db)
            if is_initialized:
                logger.info("‚úÖ System is already initialized")
            else:
                logger.warning("‚ö†Ô∏è  System needs to be initialized")
                logger.info("üìù Use POST /api/auth/system/init to initialize the system")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        from services.background_service import BackgroundService
        BackgroundService.start_scheduled_tasks()
        logger.info("‚úÖ Background tasks started")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize application: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Shutting down Enhanced Rental System API...")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        with SessionLocal() as db:
            cleanup_result = DatabaseInitService.cleanup_old_data(db)
            logger.info(f"üßπ Cleanup completed: {cleanup_result}")
    except Exception as e:
        logger.error(f"‚ùå Cleanup failed: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Enhanced Rental System API",
    description="""
    üè† **–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏**
    
    –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
    
    ## –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    
    * üè¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏** - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç—É—Å—ã
    * üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏** - –±–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∏—Å—Ç–æ—Ä–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    * üìã **–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã** - —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –∑–∞—Å–µ–ª–µ–Ω–∏–µ/–≤—ã—Å–µ–ª–µ–Ω–∏–µ
    * ‚úÖ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏** - —É–±–æ—Ä–∫–∞, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    * üõí **–ó–∞–∫–∞–∑—ã –≤ –Ω–æ–º–µ—Ä** - –µ–¥–∞, —É—Å–ª—É–≥–∏, –¥–æ—Å—Ç–∞–≤–∫–∞
    * üí∞ **–§–∏–Ω–∞–Ω—Å—ã –∏ –æ—Ç—á–µ—Ç—ã** - –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞
    * üìÑ **–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç** - –¥–æ–≥–æ–≤–æ—Ä—ã, –∞–∫—Ç—ã, –≠–°–§
    * üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    * üì¶ **–°–∫–ª–∞–¥** - —É—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Å–ø–∏—Å–∞–Ω–∏–µ
    
    ## –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    
    * **System Owner** - –≤–ª–∞–¥–µ–ª–µ—Ü —Å–∏—Å—Ç–µ–º—ã (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)
    * **Admin** - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 
    * **Manager** - –º–µ–Ω–µ–¥–∂–µ—Ä (–∞—Ä–µ–Ω–¥–∞, –∫–ª–∏–µ–Ω—Ç—ã)
    * **Technical Staff** - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª
    * **Accountant** - –±—É—Ö–≥–∞–ª—Ç–µ—Ä (—Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç—á–µ—Ç—ã)
    * **Cleaner** - —É–±–æ—Ä—â–∏–∫ (–∑–∞–¥–∞—á–∏ —É–±–æ—Ä–∫–∏)
    * **Storekeeper** - –∫–ª–∞–¥–æ–≤—â–∏–∫ (—Å–∫–ª–∞–¥, –º–∞—Ç–µ—Ä–∏–∞–ª—ã)
    
    ## –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    
    * üîê **–ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å** - –∏–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏
    * üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è** - –∞–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á, —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
    * üì± **–ú–æ–±–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞** - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    * üõ°Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - JWT —Ç–æ–∫–µ–Ω—ã, –∞—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π
    * üìà **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    * üåç **–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
    
    ## –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    
    * **–≠–°–§/–≠–ê–í–†** - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ò–° –≠–°–§ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
    * **–ü–ª–∞—Ç–µ–∂–∏** - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
    * **–û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å** - —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel, PDF
    * **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è** - SMS, email, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    
    ## –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Bearer —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization:
    ```
    Authorization: Bearer <your_token>
    ```
    """,
    version="2.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc", 
    openapi_url="/api/openapi.json",
    lifespan=lifespan
)

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1,0.0.0.0").split(",")
)

# CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=os.getenv("CORS_ORIGINS", "*").split(","),
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üì• {request.method} {request.url.path} from {request.client.host}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    process_time = time.time() - start_time
    logger.info(f"üì§ {request.method} {request.url.path} completed in {process_time:.3f}s with status {response.status_code}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    response.headers["X-Process-Time"] = str(process_time)
    
    return response

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
app.add_exception_handler(StarletteHTTPException, http_exception_handler)
app.add_exception_handler(RequestValidationError, validation_exception_handler)
app.add_exception_handler(Exception, general_exception_handler)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router)
app.include_router(admin.router)
app.include_router(organization.router)
app.include_router(properties.router)
app.include_router(rentals.router)
app.include_router(clients.router)
app.include_router(orders.router)
app.include_router(reports.router)
app.include_router(documents.router)
app.include_router(tasks.router)
app.include_router(payroll.router)
app.include_router(inventory.router)
app.include_router(payments.router)

# –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
@app.get("/", tags=["Root"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint API"""
    return {
        "message": "üè† Enhanced Rental System API",
        "version": "2.0.0",
        "docs": "/api/docs",
        "admin": "/admin",
        "status": "üü¢ Online",
        "features": [
            "üè¢ Property Management",
            "üë• Client Management", 
            "üìã Rental Management",
            "‚úÖ Task Management",
            "üõí Room Orders",
            "üí∞ Financial Reports",
            "üìÑ Document Management",
            "üìä Analytics & Reports",
            "üì¶ Inventory Management",
            "üîê Multi-tenant Security"
        ]
    }

# Health check endpoint
@app.get("/api/health", tags=["Health"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        with SessionLocal() as db:
            db.execute("SELECT 1")
        
        return {
            "status": "üü¢ Healthy",
            "database": "üü¢ Connected",
            "version": "2.0.0",
            "timestamp": datetime.now().isoformat(),
            "modules": {
                "properties": "‚úÖ Active",
                "rentals": "‚úÖ Active", 
                "clients": "‚úÖ Active",
                "tasks": "‚úÖ Active",
                "orders": "‚úÖ Active",
                "reports": "‚úÖ Active",
                "documents": "‚úÖ Active",
                "inventory": "‚úÖ Active"
            }
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "üî¥ Unhealthy",
            "database": "üî¥ Disconnected",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
@app.get("/api/info", tags=["System"])
async def system_info():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        "name": "Enhanced Rental System API",
        "version": "2.0.0",
        "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
        "environment": os.getenv("ENVIRONMENT", "development"),
        "debug": os.getenv("DEBUG", "false").lower() == "true",
        "modules": {
            "properties": {
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏",
                "endpoints": ["/api/properties"]
            },
            "rentals": {
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π",
                "endpoints": ["/api/rentals"]
            },
            "clients": {
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏", 
                "endpoints": ["/api/clients"]
            },
            "tasks": {
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏",
                "endpoints": ["/api/tasks"]
            },
            "orders": {
                "description": "–ó–∞–∫–∞–∑—ã –≤ –Ω–æ–º–µ—Ä",
                "endpoints": ["/api/orders"]
            },
            "reports": {
                "description": "–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "endpoints": ["/api/reports"]
            },
            "documents": {
                "description": "–î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç",
                "endpoints": ["/api/documents"]
            },
            "payroll": {
                "description": "–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã",
                "endpoints": ["/api/payroll"]
            },
            "inventory": {
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º",
                "endpoints": ["/api/inventory"]
            }
        },
        "features": {
            "multi_tenant": True,
            "admin_panel": True, 
            "audit_logging": True,
            "rate_limiting": True,
            "document_generation": True,
            "esf_integration": True,
            "auto_task_assignment": True,
            "payroll_calculation": True,
            "inventory_tracking": True,
            "client_analytics": True,
            "financial_reports": True
        },
        "supported_languages": ["ru", "kk"],
        "supported_formats": ["JSON", "Excel", "PDF"],
        "integrations": ["–≠–°–§/–≠–ê–í–†", "SMS", "Email", "Payment Systems"]
    }


# Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
@app.get("/api/system/stats", tags=["System"])
async def get_system_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    with SessionLocal() as db:
        from services.init_service import DatabaseInitService
        stats = DatabaseInitService.get_system_stats(db)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from models.extended_models import Property, Rental, Task, RoomOrder
        
        stats["modules"] = {
            "properties": db.query(Property).count(),
            "active_rentals": db.query(Rental).filter(Rental.is_active == True).count(),
            "pending_tasks": db.query(Task).filter(Task.status == "pending").count(),
            "pending_orders": db.query(RoomOrder).filter(RoomOrder.status == "pending").count()
        }
        
        return stats


if __name__ == "__main__":
    import uvicorn
    import sys
    import time
    from datetime import datetime
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=os.getenv("DEBUG", "false").lower() == "true",
        log_level="info"
    )