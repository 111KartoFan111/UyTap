import { useState } from 'react';
import { FiX, FiUser, FiMail, FiPhone, FiShield, FiLock } from 'react-icons/fi';
import './CreateUserModal.css';

const CreateUserModal = ({ organizationId, onClose, onSubmit }) => {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    first_name: '',
    last_name: '',
    middle_name: '',
    phone: '',
    role: 'admin',
    status: 'active'
  });

  const [errors, setErrors] = useState({});
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const roles = [
    { value: 'admin', label: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
    { value: 'manager', label: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
    { value: 'technical_staff', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª' },
    { value: 'accountant', label: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä' },
    { value: 'cleaner', label: '–£–±–æ—Ä—â–∏–∫' },
    { value: 'storekeeper', label: '–ö–ª–∞–¥–æ–≤—â–∏–∫' }
  ];

  const statuses = [
    { value: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–π' },
    { value: 'inactive', label: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π' },
    { value: 'suspended', label: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' },
    { value: 'pending_verification', label: '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' }
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const generatePassword = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
    let password = '';
    for (let i = 0; i < 12; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    setFormData(prev => ({ ...prev, password }));
  };

  const validateForm = () => {
    const newErrors = {};

    // Required fields
    if (!formData.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';
    }

    if (!formData.password.trim()) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (formData.password.length < 8) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (!formData.first_name.trim()) {
      newErrors.first_name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.last_name.trim()) {
      newErrors.last_name = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);
    try {
      await onSubmit({
        ...formData,
        organization_id: organizationId
      });
    } catch (error) {
      console.error('Error creating user:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={e => e.stopPropagation()}>
        <div className="modal-header">
          <h2>
            <FiUser /> –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
          </h2>
          <button className="close-btn" onClick={onClose}>
            <FiX size={20} />
          </button>
        </div>

        <form className="user-form" onSubmit={handleSubmit}>
          <div className="form-section">
            <h3>
              <FiUser /> –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            </h3>
            <div className="form-grid">
              <div className="form-field">
                <label>–ò–º—è *</label>
                <input
                  type="text"
                  name="first_name"
                  value={formData.first_name}
                  onChange={handleChange}
                  placeholder="–ê–Ω–Ω–∞"
                  className={errors.first_name ? 'error' : ''}
                />
                {errors.first_name && <span className="error-text">{errors.first_name}</span>}
              </div>

              <div className="form-field">
                <label>–§–∞–º–∏–ª–∏—è *</label>
                <input
                  type="text"
                  name="last_name"
                  value={formData.last_name}
                  onChange={handleChange}
                  placeholder="–¶–∏–±—É–π—Å–∫–∞—è"
                  className={errors.last_name ? 'error' : ''}
                />
                {errors.last_name && <span className="error-text">{errors.last_name}</span>}
              </div>

              <div className="form-field full-width">
                <label>–û—Ç—á–µ—Å—Ç–≤–æ</label>
                <input
                  type="text"
                  name="middle_name"
                  value={formData.middle_name}
                  onChange={handleChange}
                  placeholder="–°–µ—Ä–≥–µ–µ–≤–Ω–∞"
                />
              </div>
            </div>
          </div>

          <div className="form-section">
            <h3>
              <FiMail /> –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            <div className="form-grid">
              <div className="form-field">
                <label>Email *</label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="anna@hotel-paradise.com"
                  className={errors.email ? 'error' : ''}
                />
                {errors.email && <span className="error-text">{errors.email}</span>}
              </div>

              <div className="form-field">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  placeholder="+7 (777) 123-45-67"
                />
              </div>
            </div>
          </div>

          <div className="form-section">
            <h3>
              <FiLock /> –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            </h3>
            <div className="form-grid">
              <div className="form-field">
                <label>–ü–∞—Ä–æ–ª—å *</label>
                <div className="password-input">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    name="password"
                    value={formData.password}
                    onChange={handleChange}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    className={errors.password ? 'error' : ''}
                  />
                  <button
                    type="button"
                    className="password-toggle"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
                  </button>
                </div>
                {errors.password && <span className="error-text">{errors.password}</span>}
                <small className="field-hint">
                  –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                </small>
              </div>

              <div className="form-field">
                <label>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è</label>
                <button
                  type="button"
                  className="generate-password-btn"
                  onClick={generatePassword}
                >
                  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å
                </button>
                <small className="field-hint">
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
                </small>
              </div>
            </div>
          </div>

          <div className="form-section">
            <h3>
              <FiShield /> –†–æ–ª—å –∏ —Å—Ç–∞—Ç—É—Å
            </h3>
            <div className="form-grid">
              <div className="form-field">
                <label>–†–æ–ª—å *</label>
                <select
                  name="role"
                  value={formData.role}
                  onChange={handleChange}
                >
                  {roles.map(role => (
                    <option key={role.value} value={role.value}>
                      {role.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-field">
                <label>–°—Ç–∞—Ç—É—Å</label>
                <select
                  name="status"
                  value={formData.status}
                  onChange={handleChange}
                >
                  {statuses.map(status => (
                    <option key={status.value} value={status.value}>
                      {status.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          <div className="form-actions">
            <button type="button" className="btn-cancel" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className="btn-submit" disabled={loading}>
              {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateUserModal;