import React, { useState } from 'react';
import { FiDollarSign, FiCheck, FiX, FiCreditCard } from 'react-icons/fi';

const QuickPaymentPopup = ({ rental, onClose, onPaymentAdd, position }) => {
  const [paymentData, setPaymentData] = useState({
    amount: rental.total_amount - (rental.paid_amount || 0), // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞—Ç–æ–∫ –∫ –¥–æ–ø–ª–∞—Ç–µ
    method: 'cash',
    type: 'rent_payment'
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (paymentData.amount <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
      return;
    }
    
    try {
      setLoading(true);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
      const payment = {
        payment_amount: parseFloat(paymentData.amount),
        payment_method: paymentData.method,
        payment_type: paymentData.type,
        description: `–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã ${rental.property?.number || ''}`,
        auto_complete: true
      };
      
      await onPaymentAdd(rental.id, payment);
      onClose();
      
    } catch (error) {
      console.error('Quick payment failed:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const outstanding = rental.total_amount - (rental.paid_amount || 0);

  return (
    <div 
      className="bg-white rounded-lg shadow-xl p-4 w-80"
      onClick={e => e.stopPropagation()}
      style={{
        maxWidth: '90vw',
        position: 'relative',
        zIndex: 10002
      }}
    >
      <div className="flex justify-between items-center mb-4">
        <h3 className="font-semibold flex items-center">
          <FiDollarSign className="mr-2 text-green-600" />
          –ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞
        </h3>
        <button 
          onClick={onClose}
          className="text-gray-400 hover:text-gray-600"
        >
          <FiX />
        </button>
      </div>

      <div className="mb-4 p-3 bg-gray-50 rounded">
        <div className="text-sm text-gray-600">
          –ê—Ä–µ–Ω–¥–∞: {rental.property?.name || rental.property?.number}
        </div>
        <div className="text-sm text-gray-600">
          –ö–ª–∏–µ–Ω—Ç: {rental.client ? `${rental.client.first_name} ${rental.client.last_name}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}
        </div>
        <div className="mt-2 flex justify-between">
          <span className="text-sm">–ö –¥–æ–ø–ª–∞—Ç–µ:</span>
          <span className="font-semibold text-red-600">
            ‚Ç∏ {outstanding.toLocaleString()}
          </span>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-3">
        <div>
          <label className="block text-sm font-medium mb-1">–°—É–º–º–∞</label>
          <div className="relative">
            <input
              type="number"
              step="0.01"
              min="0.01"
              max={outstanding}
              value={paymentData.amount}
              onChange={(e) => setPaymentData(prev => ({
                ...prev,
                amount: e.target.value
              }))}
              className="w-full p-2 pl-8 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="0.00"
              required
            />
            <FiDollarSign className="absolute left-2 top-2.5 text-gray-400" size={16} />
          </div>
          <div className="flex gap-1 mt-1">
            <button
              type="button"
              onClick={() => setPaymentData(prev => ({...prev, amount: outstanding}))}
              className="text-xs bg-blue-100 text-blue-600 px-2 py-1 rounded hover:bg-blue-200"
            >
              –í–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫
            </button>
            <button
              type="button"
              onClick={() => setPaymentData(prev => ({...prev, amount: Math.round(outstanding / 2)}))}
              className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded hover:bg-gray-200"
            >
              –ü–æ–ª–æ–≤–∏–Ω–∞
            </button>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
          <select
            value={paymentData.method}
            onChange={(e) => setPaymentData(prev => ({
              ...prev,
              method: e.target.value
            }))}
            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
          >
            <option value="cash">üíµ –ù–∞–ª–∏—á–Ω—ã–µ</option>
            <option value="card">üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</option>
            <option value="transfer">üè¶ –ü–µ—Ä–µ–≤–æ–¥</option>
            <option value="qr_code">üì± QR-–∫–æ–¥</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium mb-1">–¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞</label>
          <select
            value={paymentData.type}
            onChange={(e) => setPaymentData(prev => ({
              ...prev,
              type: e.target.value
            }))}
            className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500"
          >
            <option value="rent_payment">–û—Å–Ω–æ–≤–Ω–∞—è –æ–ø–ª–∞—Ç–∞</option>
            <option value="deposit">–ó–∞–ª–æ–≥</option>
            <option value="additional">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞</option>
            <option value="penalty">–®—Ç—Ä–∞—Ñ</option>
          </select>
        </div>

        <div className="flex gap-2 pt-2">
          <button
            type="button"
            onClick={onClose}
            className="flex-1 px-3 py-2 border border-gray-300 rounded hover:bg-gray-50"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            disabled={loading || !paymentData.amount}
            className="flex-1 bg-green-600 text-white px-3 py-2 rounded hover:bg-green-700 disabled:opacity-50 flex items-center justify-center"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
            ) : (
              <>
                <FiCheck className="mr-1" />
                –î–æ–±–∞–≤–∏—Ç—å
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default QuickPaymentPopup;