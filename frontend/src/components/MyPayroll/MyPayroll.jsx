// frontend/src/components/MyPayroll/MyPayroll.jsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–±–µ–∑ —Ü–∏–∫–ª–æ–≤)
import React, { useState, useEffect, useCallback } from 'react';
import { useData } from '../../contexts/DataContext';
import { useAuth } from '../../contexts/AuthContext';
import dayjs from 'dayjs';
import './MyPayroll.css'; // –î–æ–±–∞–≤–∏–º —Å—Ç–∏–ª–∏

const MyPayroll = () => {
  const { user } = useAuth(); // –ò–∑–º–µ–Ω–µ–Ω–æ —Å currentUser –Ω–∞ user
  const { reports, loading } = useData();

  const [payrollData, setPayrollData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedPeriod, setSelectedPeriod] = useState('current_month');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
  const getPeriodDates = (period) => {
    const now = dayjs();
    
    switch (period) {
      case 'current_month':
        return {
          start: now.startOf('month'),
          end: now.endOf('month'),
          label: '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'
        };
      case 'last_month':
        return {
          start: now.subtract(1, 'month').startOf('month'),
          end: now.subtract(1, 'month').endOf('month'),
          label: '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü'
        };
      case 'last_3_months':
        return {
          start: now.subtract(3, 'months').startOf('month'),
          end: now.endOf('month'),
          label: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞'
        };
      case 'current_year':
        return {
          start: now.startOf('year'),
          end: now.endOf('year'),
          label: '–¢–µ–∫—É—â–∏–π –≥–æ–¥'
        };
      default:
        return {
          start: now.startOf('month'),
          end: now.endOf('month'),
          label: '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'
        };
    }
  };

  const loadPayroll = useCallback(async (period = selectedPeriod) => {
    try {
      setIsLoading(true);
      setError(null);
      
      const { start, end } = getPeriodDates(period);
      
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ –ø–µ—Ä–∏–æ–¥:', {
        start: start.format('YYYY-MM-DDTHH:mm:ss'),
        end: end.format('YYYY-MM-DDTHH:mm:ss')
      });

      const data = await reports.getMyPayroll(
        start.format('YYYY-MM-DDTHH:mm:ss'),
        end.format('YYYY-MM-DDTHH:mm:ss')
      );

      console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã:', data);
      
      // API —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤
      if (Array.isArray(data)) {
        setPayrollData(data);
      } else if (data) {
        // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
        setPayrollData([data]);
      } else {
        setPayrollData([]);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ:', error);
      setError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ');
    } finally {
      setIsLoading(false);
    }
  }, [selectedPeriod, reports.getMyPayroll]); // –î–æ–±–∞–≤–ª—è–µ–º useCallback –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏

  useEffect(() => {
    if (user) {
      loadPayroll();
    }
  }, [user]); // –£–±–∏—Ä–∞–µ–º reports –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

  const handlePeriodChange = useCallback((newPeriod) => {
    setSelectedPeriod(newPeriod);
    loadPayroll(newPeriod);
  }, [loadPayroll]);

  const formatCurrency = (amount) => {
    if (amount === null || amount === undefined) return '0 ‚Ç∏';
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'KZT',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount).replace('KZT', '‚Ç∏');
  };

  const formatDate = (dateString) => {
    if (!dateString) return '-';
    return dayjs(dateString).format('DD.MM.YYYY');
  };

  const calculateTotals = () => {
    if (!payrollData.length) return { totalGross: 0, totalNet: 0, totalTasks: 0 };
    
    return payrollData.reduce((acc, payroll) => ({
      totalGross: acc.totalGross + (payroll.gross_amount || 0),
      totalNet: acc.totalNet + (payroll.net_amount || 0),
      totalTasks: acc.totalTasks + (payroll.tasks_completed || 0)
    }), { totalGross: 0, totalNet: 0, totalTasks: 0 });
  };

  const getPayrollTypeLabel = (type) => {
    const types = {
      'monthly_salary': '–ú–µ—Å—è—á–Ω—ã–π –æ–∫–ª–∞–¥',
      'hourly': '–ü–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞',
      'piece_work': '–°–¥–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
    };
    return types[type] || type;
  };

  const getPaymentStatusLabel = (isPaid, paidAt) => {
    if (isPaid) {
      return (
        <span className="status-paid">
          –í—ã–ø–ª–∞—á–µ–Ω–æ {paidAt ? formatDate(paidAt) : ''}
        </span>
      );
    }
    return <span className="status-pending">–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã</span>;
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isLoading || loading) {
    return (
      <div className="my-payroll-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ...</p>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (error) {
    return (
      <div className="my-payroll-error">
        <div className="error-message">
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</h3>
          <p>{error}</p>
          <button onClick={() => loadPayroll()} className="retry-button">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  const { totalGross, totalNet, totalTasks } = calculateTotals();
  const { label: periodLabel } = getPeriodDates(selectedPeriod);

  return (
    <div className="my-payroll-page">
      <div className="page-header">
        <h1>–ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞</h1>
        <div className="user-info">
          <span className="user-name">
            {user?.first_name} {user?.last_name}
          </span>
          <span className="user-role">
            {user?.role === 'cleaner' && '–£–±–æ—Ä—â–∏–∫'}
            {user?.role === 'technical_staff' && '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª'}
            {user?.role === 'manager' && '–ú–µ–Ω–µ–¥–∂–µ—Ä'}
            {user?.role === 'accountant' && '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'}
            {user?.role === 'admin' && '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}
            {user?.role === 'storekeeper' && '–ö–ª–∞–¥–æ–≤—â–∏–∫'}
          </span>
        </div>
      </div>

      {/* –°–µ–ª–µ–∫—Ç–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ */}
      <div className="period-selector">
        <h3>–ü–µ—Ä–∏–æ–¥: {periodLabel}</h3>
        <div className="period-buttons">
          <button 
            className={selectedPeriod === 'current_month' ? 'active' : ''}
            onClick={() => handlePeriodChange('current_month')}
          >
            –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
          </button>
          <button 
            className={selectedPeriod === 'last_month' ? 'active' : ''}
            onClick={() => handlePeriodChange('last_month')}
          >
            –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
          </button>
          <button 
            className={selectedPeriod === 'last_3_months' ? 'active' : ''}
            onClick={() => handlePeriodChange('last_3_months')}
          >
            3 –º–µ—Å—è—Ü–∞
          </button>
          <button 
            className={selectedPeriod === 'current_year' ? 'active' : ''}
            onClick={() => handlePeriodChange('current_year')}
          >
            –ì–æ–¥
          </button>
        </div>
      </div>

      {/* –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ */}
      {payrollData.length > 0 && (
        <div className="payroll-summary">
          <h3>–°–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥</h3>
          <div className="summary-cards">
            <div className="summary-card">
              <span className="card-label">–û–±—â–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ</span>
              <span className="card-value">{formatCurrency(totalGross)}</span>
            </div>
            <div className="summary-card">
              <span className="card-label">–ö –≤—ã–ø–ª–∞—Ç–µ</span>
              <span className="card-value highlight">{formatCurrency(totalNet)}</span>
            </div>
            <div className="summary-card">
              <span className="card-label">–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
              <span className="card-value">{totalTasks}</span>
            </div>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç */}
      <div className="payroll-list">
        {payrollData.length === 0 ? (
          <div className="no-data">
            <div className="no-data-message">
              <h3>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</h3>
              <p>–ó–∞ –ø–µ—Ä–∏–æ–¥ "{periodLabel}" –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
              <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É.</p>
            </div>
          </div>
        ) : (
          payrollData.map((payroll, index) => (
            <div key={payroll.payroll_id || index} className="payroll-card">
              <div className="payroll-header">
                <div className="payroll-period">
                  <h4>
                    {formatDate(payroll.period_start)} ‚Äî {formatDate(payroll.period_end)}
                  </h4>
                  <span className="payroll-type">
                    {getPayrollTypeLabel(payroll.payroll_type)}
                  </span>
                </div>
                <div className="payroll-status">
                  {getPaymentStatusLabel(payroll.is_paid, payroll.paid_at)}
                </div>
              </div>

              <div className="payroll-amounts">
                <div className="amount-row">
                  <span className="amount-label">–ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:</span>
                  <span className="amount-value">{formatCurrency(payroll.base_rate)}</span>
                </div>
                
                {payroll.hours_worked > 0 && (
                  <div className="amount-row">
                    <span className="amount-label">–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Å–æ–≤:</span>
                    <span className="amount-value">{payroll.hours_worked}</span>
                  </div>
                )}

                {payroll.tasks_completed > 0 && (
                  <div className="amount-row">
                    <span className="amount-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á:</span>
                    <span className="amount-value">{payroll.tasks_completed}</span>
                  </div>
                )}

                {payroll.tasks_payment > 0 && (
                  <div className="amount-row">
                    <span className="amount-label">–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–¥–∞—á–∏:</span>
                    <span className="amount-value">{formatCurrency(payroll.tasks_payment)}</span>
                  </div>
                )}

                {payroll.bonus > 0 && (
                  <div className="amount-row bonus">
                    <span className="amount-label">–ü—Ä–µ–º–∏—è:</span>
                    <span className="amount-value">{formatCurrency(payroll.bonus)}</span>
                  </div>
                )}

                {payroll.tips > 0 && (
                  <div className="amount-row">
                    <span className="amount-label">–ß–∞–µ–≤—ã–µ:</span>
                    <span className="amount-value">{formatCurrency(payroll.tips)}</span>
                  </div>
                )}

                {payroll.other_income > 0 && (
                  <div className="amount-row">
                    <span className="amount-label">–î—Ä—É–≥–∏–µ –¥–æ—Ö–æ–¥—ã:</span>
                    <span className="amount-value">{formatCurrency(payroll.other_income)}</span>
                  </div>
                )}

                {payroll.deductions > 0 && (
                  <div className="amount-row deduction">
                    <span className="amount-label">–£–¥–µ—Ä–∂–∞–Ω–∏—è:</span>
                    <span className="amount-value">-{formatCurrency(payroll.deductions)}</span>
                  </div>
                )}

                {payroll.taxes > 0 && (
                  <div className="amount-row deduction">
                    <span className="amount-label">–ù–∞–ª–æ–≥–∏:</span>
                    <span className="amount-value">-{formatCurrency(payroll.taxes)}</span>
                  </div>
                )}

                <div className="amount-row total">
                  <span className="amount-label">–ù–∞—á–∏—Å–ª–µ–Ω–æ:</span>
                  <span className="amount-value">{formatCurrency(payroll.gross_amount)}</span>
                </div>

                <div className="amount-row final">
                  <span className="amount-label">–ö –≤—ã–ø–ª–∞—Ç–µ:</span>
                  <span className="amount-value">{formatCurrency(payroll.net_amount)}</span>
                </div>
              </div>

              {/* –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º */}
              {payroll.breakdown && payroll.breakdown.length > 0 && (
                <details className="task-breakdown">
                  <summary>
                    –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º ({payroll.breakdown.length})
                  </summary>
                  <div className="tasks-list">
                    {payroll.breakdown.map((task, taskIndex) => (
                      <div key={task.task_id || taskIndex} className="task-item">
                        <div className="task-info">
                          <span className="task-title">{task.title}</span>
                          <span className="task-type">{task.task_type}</span>
                        </div>
                        <div className="task-details">
                          <span className="task-date">
                            {formatDate(task.completed_at)}
                          </span>
                          <span className="task-payment">
                            {formatCurrency(task.payment_amount)}
                          </span>
                          {task.quality_rating && (
                            <span className="task-rating">
                              ‚≠ê {task.quality_rating}/5
                            </span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </details>
              )}
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default MyPayroll;