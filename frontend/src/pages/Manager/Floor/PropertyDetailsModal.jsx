import { useState, useEffect } from 'react';
import { 
  FiX, 
  FiHome, 
  FiUser, 
  FiCalendar, 
  FiDollarSign, 
  FiEdit2, 
  FiPlus, 
  FiTool,
  FiClock,
  FiMapPin,
  FiInfo,
  FiUsers,
  FiMaximize
} from 'react-icons/fi';
import { useData } from '../../../contexts/DataContext';
import './PropertyDetailsModal.css';

const PropertyDetailsModal = ({ 
  property, 
  onClose, 
  onCreateRental, 
  onCreateTask, 
  onEdit,
  onExtendRental,
  onTerminateRental 
}) => {
  const { tasks, utils } = useData();
  const [activeTab, setActiveTab] = useState('overview');
  const [propertyTasks, setPropertyTasks] = useState([]);
  const [propertyHistory, setPropertyHistory] = useState([]);
  const [loadingTasks, setLoadingTasks] = useState(false);
  const [loadingHistory, setLoadingHistory] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    if (property && activeTab === 'tasks') {
      loadPropertyTasks();
    }
  }, [property, activeTab]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–≤–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    if (property && activeTab === 'history') {
      loadPropertyHistory();
    }
  }, [property, activeTab]);

  const loadPropertyTasks = async () => {
    try {
      setLoadingTasks(true);
      const tasksData = await tasks.getAll({ property_id: property.id });
      setPropertyTasks(tasksData);
    } catch (error) {
      console.error('Failed to load property tasks:', error);
      utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏');
    } finally {
      setLoadingTasks(false);
    }
  };

  const loadPropertyHistory = async () => {
    try {
      setLoadingHistory(true);
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–º–µ—â–µ–Ω–∏—è
      // const historyData = await properties.getHistory(property.id);
      // setPropertyHistory(historyData);
      setPropertyHistory([]);
    } catch (error) {
      console.error('Failed to load property history:', error);
      utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
    } finally {
      setLoadingHistory(false);
    }
  };

  if (!property) return null;

  const getStatusText = (status) => {
    switch (status) {
      case 'available': return '–°–≤–æ–±–æ–¥–Ω–æ';
      case 'occupied': return '–ó–∞–Ω—è—Ç–æ';
      case 'maintenance': return '–†–µ–º–æ–Ω—Ç';
      case 'cleaning': return '–£–±–æ—Ä–∫–∞';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'available': return '#27ae60';
      case 'occupied': return '#e74c3c';
      case 'maintenance': return '#f39c12';
      case 'cleaning': return '#3498db';
      default: return '#95a5a6';
    }
  };

  const getTypeText = (type) => {
    switch (type) {
      case 'apartment': return '–ö–≤–∞—Ä—Ç–∏—Ä–∞';
      case 'room': return '–ö–æ–º–Ω–∞—Ç–∞';
      case 'studio': return '–°—Ç—É–¥–∏—è';
      case 'villa': return '–í–∏–ª–ª–∞';
      case 'office': return '–û—Ñ–∏—Å';
      default: return '';
    }
  };

  const formatCurrency = (amount) => {
    return amount ? `‚Ç∏ ${amount.toLocaleString()}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  const getTaskStatusText = (status) => {
    switch (status) {
      case 'pending': return '–í –æ–∂–∏–¥–∞–Ω–∏–∏';
      case 'in_progress': return '–í —Ä–∞–±–æ—Ç–µ';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–∞';
      default: return status;
    }
  };

  const getTaskTypeText = (type) => {
    switch (type) {
      case 'cleaning': return '–£–±–æ—Ä–∫–∞';
      case 'maintenance': return '–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
      case 'repair': return '–†–µ–º–æ–Ω—Ç';
      case 'inspection': return '–ò–Ω—Å–ø–µ–∫—Ü–∏—è';
      case 'decoration': return '–î–µ–∫–æ—Ä';
      default: return type;
    }
  };

  const getTaskTypeIcon = (type) => {
    switch (type) {
      case 'cleaning': return 'üßπ';
      case 'maintenance': return 'üîß';
      case 'repair': return 'üõ†Ô∏è';
      case 'inspection': return 'üîç';
      case 'decoration': return 'üé®';
      default: return 'üìã';
    }
  };

  const QuickExtendButtons = () => (
    <div className="quick-extend-actions">
      <button
        onClick={() => onExtendRental(property, 1)}
        className="extend-btn small"
        title="–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –¥–µ–Ω—å"
      >
        +1–¥
      </button>
      <button
        onClick={() => onExtendRental(property, 7)}
        className="extend-btn small"
        title="–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ –Ω–µ–¥–µ–ª—é"
      >
        +1–Ω
      </button>
      <button
        onClick={() => onExtendRental(property, 30)}
        className="extend-btn small"
        title="–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ –º–µ—Å—è—Ü"
      >
        +1–º
      </button>
    </div>
  );

  const tabs = [
    { id: 'overview', label: '–û–±–∑–æ—Ä', icon: FiInfo },
    { id: 'rental', label: '–ê—Ä–µ–Ω–¥–∞', icon: FiCalendar },
    { id: 'tasks', label: '–ó–∞–¥–∞—á–∏', icon: FiTool },
    { id: 'history', label: '–ò—Å—Ç–æ—Ä–∏—è', icon: FiClock }
  ];

  return (
    <div className="property-details-overlay" onClick={onClose}>
      <div className="property-details-content" onClick={e => e.stopPropagation()}>
        {/* Header */}
        <div className="property-details-header">
          <div className="header-info">
            <h2>
              <FiHome /> {property.name || `–ö–æ–º–Ω–∞—Ç–∞ ${property.number}`}
            </h2>
            <div className="property-meta">
              <span className="property-number">#{property.number}</span>
              <span 
                className="property-status"
                style={{ backgroundColor: getStatusColor(property.status) }}
              >
                {getStatusText(property.status)}
              </span>
              <span className="property-type">{getTypeText(property.property_type)}</span>
            </div>
          </div>
          <div className="header-actions">
            <button className="action-btn edit" onClick={onEdit} title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
              <FiEdit2 />
            </button>
            <button className="close-btn" onClick={onClose}>
              <FiX size={20} />
            </button>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="quick-actions">
          {property.status === 'available' && (
            <button className="quick-action-btn primary" onClick={onCreateRental}>
              <FiPlus /> –°–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥—É
            </button>
          )}
          
          {property.status === 'occupied' && (
            <>
              <QuickExtendButtons />
              <button 
                className="quick-action-btn danger" 
                onClick={() => onTerminateRental(property)}
              >
                <FiX /> –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É
              </button>
            </>
          )}
          
          <button className="quick-action-btn secondary" onClick={onCreateTask}>
            <FiTool /> –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
          </button>
        </div>

        {/* Tabs */}
        <div className="tabs-container">
          <div className="tabs-header">
            {tabs.map(tab => (
              <button
                key={tab.id}
                className={`tab-btn ${activeTab === tab.id ? 'active' : ''}`}
                onClick={() => setActiveTab(tab.id)}
              >
                <tab.icon size={16} />
                {tab.label}
              </button>
            ))}
          </div>

          <div className="tabs-content">
            {/* Overview Tab */}
            {activeTab === 'overview' && (
              <div className="tab-content">
                <div className="info-grid">
                  <div className="info-card">
                    <h4><FiMapPin /> –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h4>
                    <div className="info-item">
                      <span>–≠—Ç–∞–∂:</span>
                      <span>{property.floor || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    <div className="info-item">
                      <span>–ó–¥–∞–Ω–∏–µ:</span>
                      <span>{property.building || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                    <div className="info-item">
                      <span>–ê–¥—Ä–µ—Å:</span>
                      <span>{property.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                  </div>

                  <div className="info-card">
                    <h4><FiMaximize /> –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
                    <div className="info-item">
                      <span>–ü–ª–æ—â–∞–¥—å:</span>
                      <span>{property.area ? `${property.area} –º¬≤` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                    <div className="info-item">
                      <span>–ö–æ–º–Ω–∞—Ç:</span>
                      <span>{property.rooms_count || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                    </div>
                    <div className="info-item">
                      <span>–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</span>
                      <span>{property.max_occupancy || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —á–µ–ª.</span>
                    </div>
                  </div>

                  <div className="info-card">
                    <h4><FiDollarSign /> –¢–∞—Ä–∏—Ñ—ã</h4>
                    <div className="rates-list">
                      {property.hourly_rate && (
                        <div className="rate-item">
                          <span>–ü–æ—á–∞—Å–æ–≤–æ:</span>
                          <span>{formatCurrency(property.hourly_rate)}/—á–∞—Å</span>
                        </div>
                      )}
                      {property.daily_rate && (
                        <div className="rate-item">
                          <span>–ü–æ—Å—É—Ç–æ—á–Ω–æ:</span>
                          <span>{formatCurrency(property.daily_rate)}/–¥–µ–Ω—å</span>
                        </div>
                      )}
                      {property.monthly_rate && (
                        <div className="rate-item">
                          <span>–ü–æ–º–µ—Å—è—á–Ω–æ:</span>
                          <span>{formatCurrency(property.monthly_rate)}/–º–µ—Å</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {property.description && (
                  <div className="description-section">
                    <h4>–û–ø–∏—Å–∞–Ω–∏–µ</h4>
                    <p>{property.description}</p>
                  </div>
                )}

                {property.amenities && property.amenities.length > 0 && (
                  <div className="amenities-section">
                    <h4>–£–¥–æ–±—Å—Ç–≤–∞</h4>
                    <div className="amenities-list">
                      {property.amenities.map((amenity, index) => (
                        <span key={index} className="amenity-tag">
                          {amenity}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Rental Tab */}
            {activeTab === 'rental' && (
              <div className="tab-content">
                {property.status === 'occupied' && property.activeRental ? (
                  <div className="rental-info">
                    <div className="rental-card">
                      <h4><FiUser /> –¢–µ–∫—É—â–∞—è –∞—Ä–µ–Ω–¥–∞</h4>
                      <div className="rental-details">
                        <div className="detail-item">
                          <span>–ö–ª–∏–µ–Ω—Ç:</span>
                          <span>{property.currentGuests?.[0] || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                        </div>
                        <div className="detail-item">
                          <span>–ó–∞—Å–µ–ª–µ–Ω–∏–µ:</span>
                          <span>{property.checkIn || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                        </div>
                        <div className="detail-item">
                          <span>–í—ã—Å–µ–ª–µ–Ω–∏–µ:</span>
                          <span>{property.checkOut || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                        </div>
                        <div className="detail-item">
                          <span>–°—É–º–º–∞:</span>
                          <span>{formatCurrency(property.activeRental?.total_amount)}</span>
                        </div>
                      </div>
                      
                      <div className="rental-actions">
                        <h5>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h5>
                        <QuickExtendButtons />
                        <button 
                          className="action-btn danger full-width"
                          onClick={() => onTerminateRental(property)}
                        >
                          <FiX /> –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É
                        </button>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="no-rental">
                    <div className="empty-state">
                      <FiCalendar size={48} />
                      <h4>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã</h4>
                      <p>–ü–æ–º–µ—â–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞—Å–µ–ª–µ–Ω–∏—é</p>
                      <button className="action-btn primary" onClick={onCreateRental}>
                        <FiPlus /> –°–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥—É
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Tasks Tab */}
            {activeTab === 'tasks' && (
              <div className="tab-content">
                <div className="section-header">
                  <h4>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</h4>
                  <button className="action-btn secondary small" onClick={onCreateTask}>
                    <FiPlus /> –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
                  </button>
                </div>
                
                {loadingTasks ? (
                  <div className="loading-spinner"></div>
                ) : (
                  <div className="tasks-list">
                    {propertyTasks.length > 0 ? (
                      propertyTasks.map(task => (
                        <div key={task.id} className="task-item">
                          <div className="task-info">
                            <span className="task-title">{task.title}</span>
                            <span className={`task-type ${task.task_type}`}>
                              {getTaskTypeIcon(task.task_type)} {getTaskTypeText(task.task_type)}
                            </span>
                          </div>
                          <div className="task-meta">
                            <span className="task-assignee">
                              {task.assigned_to_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
                            </span>
                            <span className="task-due">
                              {task.due_date ? formatDate(task.due_date) : '–ë–µ–∑ —Å—Ä–æ–∫–∞'}
                            </span>
                          </div>
                          <div className={`task-status ${task.status}`}>
                            {getTaskStatusText(task.status)}
                          </div>
                        </div>
                      ))
                    ) : (
                      <div className="empty-state small">
                        <FiTool size={32} />
                        <p>–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è</p>
                        <button className="action-btn secondary" onClick={onCreateTask}>
                          <FiPlus /> –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
                        </button>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}

            {/* History Tab */}
            {activeTab === 'history' && (
              <div className="tab-content">
                {loadingHistory ? (
                  <div className="loading-spinner"></div>
                ) : (
                  <div className="history-list">
                    {propertyHistory.length > 0 ? (
                      propertyHistory.map((historyItem, index) => (
                        <div key={index} className="history-item">
                          <div className={`history-icon ${historyItem.type}`}>
                            {historyItem.type === 'rental' ? <FiCalendar /> : <FiTool />}
                          </div>
                          <div className="history-info">
                            <span className="history-title">{historyItem.title}</span>
                            <span className="history-details">{historyItem.details}</span>
                            <span className="history-date">{formatDate(historyItem.date)}</span>
                          </div>
                          {historyItem.amount && (
                            <div className="history-amount">
                              {formatCurrency(historyItem.amount)}
                            </div>
                          )}
                        </div>
                      ))
                    ) : (
                      <div className="empty-state small">
                        <FiClock size={32} />
                        <p>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞</p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PropertyDetailsModal;