import { useState, useEffect } from 'react';
import { FiX, FiTool, FiUser, FiCalendar, FiAlertCircle } from 'react-icons/fi';
import { useData } from '../../../contexts/DataContext';
import { organizationAPI } from '../../../services/api';
import './TaskModal.css';

const TaskModal = ({ property, onClose, onSubmit }) => {
  const { utils } = useData();
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    task_type: 'cleaning',
    priority: 'medium',
    assigned_to: '',
    due_date: '',
    estimated_duration: 60, // –≤ –º–∏–Ω—É—Ç–∞—Ö
    notes: ''
  });

  const [errors, setErrors] = useState({});
  const [employees, setEmployees] = useState([]);
  const [loadingEmployees, setLoadingEmployees] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    loadEmployees();
  }, []);

  const loadEmployees = async () => {
    try {
      setLoadingEmployees(true);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
      const employeesData = await organizationAPI.getUsers({
        role: ['cleaner', 'technical_staff', 'manager'],
        status: 'active'
      });
      
      setEmployees(employeesData);
    } catch (error) {
      console.error('Failed to load employees:', error);
      utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
      setEmployees([]);
    } finally {
      setLoadingEmployees(false);
    }
  };

  const taskTypes = [
    { value: 'cleaning', label: '–£–±–æ—Ä–∫–∞', icon: 'üßπ' },
    { value: 'maintenance', label: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', icon: 'üîß' },
    { value: 'repair', label: '–†–µ–º–æ–Ω—Ç', icon: 'üõ†Ô∏è' },
    { value: 'inspection', label: '–ò–Ω—Å–ø–µ–∫—Ü–∏—è', icon: 'üîç' },
    { value: 'decoration', label: '–î–µ–∫–æ—Ä', icon: 'üé®' },
    { value: 'other', label: '–î—Ä—É–≥–æ–µ', icon: 'üìã' }
  ];

  const priorities = [
    { value: 'low', label: '–ù–∏–∑–∫–∏–π', color: '#27ae60' },
    { value: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π', color: '#f39c12' },
    { value: 'high', label: '–í—ã—Å–æ–∫–∏–π', color: '#e74c3c' },
    { value: 'urgent', label: '–°—Ä–æ—á–Ω–æ', color: '#8e44ad' }
  ];

  const validateForm = () => {
    const newErrors = {};

    if (!formData.title.trim()) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }
    if (!formData.due_date) {
      newErrors.due_date = '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else {
      const dueDate = new Date(formData.due_date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (dueDate < today) {
        newErrors.due_date = '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º';
      }
    }
    if (formData.estimated_duration < 15) {
      newErrors.estimated_duration = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 15 –º–∏–Ω—É—Ç';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm()) {
      const taskData = {
        ...formData,
        property_id: property.id,
        estimated_duration: parseInt(formData.estimated_duration),
        assigned_to: formData.assigned_to || null
      };
      onSubmit(taskData);
    }
  };

  const getTaskTypeIcon = (type) => {
    const taskType = taskTypes.find(t => t.value === type);
    return taskType ? taskType.icon : 'üìã';
  };

  const getPriorityColor = (priority) => {
    const priorityObj = priorities.find(p => p.value === priority);
    return priorityObj ? priorityObj.color : '#666';
  };

  const getRoleDisplayName = (role) => {
    const roleNames = {
      cleaner: '–£–±–æ—Ä—â–∏–∫',
      technical_staff: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      manager: '–ú–µ–Ω–µ–¥–∂–µ—Ä',
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    };
    return roleNames[role] || role;
  };

  return (
    <div className="task-modal-overlay" onClick={onClose}>
      <div className="task-modal-content" onClick={e => e.stopPropagation()}>
        <div className="task-modal-header">
          <h2>
            <FiTool /> –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è {property?.number}
          </h2>
          <button className="close-btn" onClick={onClose}>
            <FiX size={20} />
          </button>
        </div>

        <form className="task-form" onSubmit={handleSubmit}>
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="form-section">
            <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="form-grid">
              <div className="form-field">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *</label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                  className={errors.title ? 'error' : ''}
                />
                {errors.title && <span className="error-text">{errors.title}</span>}
              </div>

              <div className="form-field">
                <label>–¢–∏–ø –∑–∞–¥–∞—á–∏ *</label>
                <select
                  value={formData.task_type}
                  onChange={(e) => setFormData({ ...formData, task_type: e.target.value })}
                  className={errors.task_type ? 'error' : ''}
                >
                  {taskTypes.map(type => (
                    <option key={type.value} value={type.value}>
                      {type.icon} {type.label}
                    </option>
                  ))}
                </select>
                {errors.task_type && <span className="error-text">{errors.task_type}</span>}
              </div>

              <div className="form-field">
                <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                <select
                  value={formData.priority}
                  onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
                  style={{ borderLeftColor: getPriorityColor(formData.priority) }}
                >
                  {priorities.map(priority => (
                    <option key={priority.value} value={priority.value}>
                      {priority.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-field">
                <label>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</label>
                <select
                  value={formData.assigned_to}
                  onChange={(e) => setFormData({ ...formData, assigned_to: e.target.value })}
                  disabled={loadingEmployees}
                >
                  <option value="">–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</option>
                  {employees.map(emp => (
                    <option key={emp.id} value={emp.id}>
                      {emp.first_name} {emp.last_name} ({getRoleDisplayName(emp.role)})
                    </option>
                  ))}
                </select>
                {loadingEmployees && <small>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...</small>}
                {!loadingEmployees && employees.length === 0 && (
                  <small className="warning-text">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</small>
                )}
              </div>
            </div>

            <div className="form-field">
              <label>–û–ø–∏—Å–∞–Ω–∏–µ *</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏..."
                rows="3"
                className={errors.description ? 'error' : ''}
              />
              {errors.description && <span className="error-text">{errors.description}</span>}
            </div>
          </div>

          {/* –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
          <div className="form-section">
            <h3>
              <FiCalendar /> –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            </h3>
            <div className="form-grid">
              <div className="form-field">
                <label>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è *</label>
                <input
                  type="datetime-local"
                  value={formData.due_date}
                  onChange={(e) => setFormData({ ...formData, due_date: e.target.value })}
                  className={errors.due_date ? 'error' : ''}
                />
                {errors.due_date && <span className="error-text">{errors.due_date}</span>}
              </div>

              <div className="form-field">
                <label>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)</label>
                <input
                  type="number"
                  min="15"
                  step="15"
                  value={formData.estimated_duration}
                  onChange={(e) => setFormData({ ...formData, estimated_duration: e.target.value })}
                  className={errors.estimated_duration ? 'error' : ''}
                />
                {errors.estimated_duration && <span className="error-text">{errors.estimated_duration}</span>}
                <small>–ú–∏–Ω–∏–º—É–º 15 –º–∏–Ω—É—Ç</small>
              </div>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è */}
          <div className="form-section">
            <div className="form-field">
              <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è</label>
              <textarea
                value={formData.notes}
                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏..."
                rows="2"
              />
            </div>
          </div>

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π */}
          {property?.status === 'occupied' && (
            <div className="warning-banner">
              <FiAlertCircle />
              <span>
                –ü–æ–º–µ—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç–æ. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, –Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 
                –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º.
              </span>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="form-actions">
            <button type="button" className="btn-cancel" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className="btn-submit">
              <FiTool />
              –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default TaskModal;