import { useState } from 'react';
import { FiX, FiPlus } from 'react-icons/fi';
import { useData } from '../../../contexts/DataContext';

const OperationModal = ({ employees, onClose, onSubmit }) => {
  const { payroll, utils } = useData();
  const [operationType, setOperationType] = useState('bonus');
  const [formData, setFormData] = useState({
    user_id: '',
    amount: '',
    description: '',
    operation_date: new Date().toISOString().split('T')[0]
  });

  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};

    if (!formData.user_id) {
      newErrors.user_id = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞';
    }
    if (!formData.amount || parseFloat(formData.amount) <= 0) {
      newErrors.amount = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
    }
    if (!formData.description?.trim()) {
      newErrors.description = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      const amount = parseFloat(formData.amount);
      const reason = formData.description.trim();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
      switch (operationType) {
        case 'bonus':
          await payroll.addQuickBonus(formData.user_id, {
            amount,
            reason,
            apply_to_current_month: true
          });
          break;
        case 'penalty':
          await payroll.addQuickPenalty(formData.user_id, {
            amount,
            reason,
            apply_to_current_month: true
          });
          break;
        case 'overtime':
          await payroll.addOvertimePayment(formData.user_id, {
            hours: amount, // –¥–ª—è —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö amount —ç—Ç–æ —á–∞—Å—ã
            description: reason
          });
          break;
        case 'allowance':
          await payroll.addAllowance(formData.user_id, {
            amount,
            title: '–ù–∞–¥–±–∞–≤–∫–∞',
            description: reason,
            is_recurring: false
          });
          break;
        case 'deduction':
          await payroll.addDeduction(formData.user_id, {
            amount,
            title: '–£–¥–µ—Ä–∂–∞–Ω–∏–µ',
            reason
          });
          break;
        default:
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }

      utils.showSuccess('–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      onSubmit();
      onClose();
    } catch (error) {
      console.error('Failed to add operation:', error);
      utils.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    }
  };

  const operationTypes = [
    { value: 'bonus', label: '–ü—Ä–µ–º–∏—è', icon: 'üí∞', description: '–†–∞–∑–æ–≤–∞—è –ø—Ä–µ–º–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É' },
    { value: 'penalty', label: '–®—Ç—Ä–∞—Ñ', icon: '‚ö†Ô∏è', description: '–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è' },
    { value: 'overtime', label: '–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ', icon: '‚è∞', description: '–û–ø–ª–∞—Ç–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤' },
    { value: 'allowance', label: '–ù–∞–¥–±–∞–≤–∫–∞', icon: 'üìà', description: '–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞' },
    { value: 'deduction', label: '–£–¥–µ—Ä–∂–∞–Ω–∏–µ', icon: 'üìâ', description: '–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã' }
  ];

  const getSelectedOperationType = () => {
    return operationTypes.find(type => type.value === operationType);
  };

  const getAmountLabel = () => {
    switch (operationType) {
      case 'overtime':
        return '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ *';
      default:
        return '–°—É–º–º–∞ *';
    }
  };

  const getAmountPlaceholder = () => {
    switch (operationType) {
      case 'overtime':
        return '–ù–∞–ø—Ä–∏–º–µ—Ä: 8';
      default:
        return '–ù–∞–ø—Ä–∏–º–µ—Ä: 50000';
    }
  };

  const getAmountStep = () => {
    switch (operationType) {
      case 'overtime':
        return '0.5';
      default:
        return '1000';
    }
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content operation-modal" onClick={e => e.stopPropagation()}>
        <div className="modal-header">
          <h2>
            <FiPlus /> –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
          </h2>
          <button className="close-btn" onClick={onClose}>
            <FiX />
          </button>
        </div>

        <form className="operation-form" onSubmit={handleSubmit}>
          <div className="operation-types">
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
            <div className="operation-types-grid">
              {operationTypes.map(type => (
                <button
                  key={type.value}
                  type="button"
                  className={`operation-type-btn ${operationType === type.value ? 'active' : ''}`}
                  onClick={() => setOperationType(type.value)}
                >
                  <span className="operation-icon">{type.icon}</span>
                  <div className="operation-info">
                    <span className="operation-title">{type.label}</span>
                    <span className="operation-description">{type.description}</span>
                  </div>
                </button>
              ))}
            </div>
          </div>

          <div className="selected-operation-info">
            <div className="selected-operation-header">
              <span className="selected-icon">{getSelectedOperationType()?.icon}</span>
              <div>
                <h4>{getSelectedOperationType()?.label}</h4>
                <p>{getSelectedOperationType()?.description}</p>
              </div>
            </div>
          </div>

          <div className="form-grid">
            <div className="form-field">
              <label>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ *</label>
              <select
                value={formData.user_id}
                onChange={(e) => setFormData({ ...formData, user_id: e.target.value })}
                className={errors.user_id ? 'error' : ''}
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</option>
                {employees.map(employee => (
                  <option key={employee.id} value={employee.id}>
                    {employee.first_name} {employee.last_name} - {employee.role}
                  </option>
                ))}
              </select>
              {errors.user_id && <span className="error-text">{errors.user_id}</span>}
            </div>

            <div className="form-field">
              <label>{getAmountLabel()}</label>
              <input
                type="number"
                min="0"
                step={getAmountStep()}
                value={formData.amount}
                onChange={(e) => setFormData({ ...formData, amount: e.target.value })}
                placeholder={getAmountPlaceholder()}
                className={errors.amount ? 'error' : ''}
                required
              />
              {errors.amount && <span className="error-text">{errors.amount}</span>}
              {operationType === 'overtime' && (
                <small className="field-hint">
                  –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ç–∞—Ä–∏—Ñ—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
                </small>
              )}
            </div>

            <div className="form-field">
              <label>–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏</label>
              <input
                type="date"
                value={formData.operation_date}
                onChange={(e) => setFormData({ ...formData, operation_date: e.target.value })}
              />
            </div>

            <div className="form-field full-width">
              <label>
                {operationType === 'penalty' || operationType === 'deduction' ? '–ü—Ä–∏—á–∏–Ω–∞ *' : '–û–ø–∏—Å–∞–Ω–∏–µ *'}
              </label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                placeholder={
                  operationType === 'bonus' ? '–ó–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É...' :
                  operationType === 'penalty' ? '–ü—Ä–∏—á–∏–Ω–∞ —à—Ç—Ä–∞—Ñ–∞...' :
                  operationType === 'overtime' ? '–û–ø–∏—Å–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã...' :
                  operationType === 'allowance' ? '–û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–¥–±–∞–≤–∫–∏...' :
                  '–ü—Ä–∏—á–∏–Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è...'
                }
                rows="3"
                className={errors.description ? 'error' : ''}
                required
              />
              {errors.description && <span className="error-text">{errors.description}</span>}
            </div>

            {(operationType === 'bonus' || operationType === 'penalty') && (
              <div className="form-field full-width">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    defaultChecked={true}
                    readOnly
                  />
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
                </label>
                <small className="field-hint">
                  –û–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
                </small>
              </div>
            )}
          </div>

          <div className="form-actions">
            <button type="button" className="btn-cancel" onClick={onClose}>
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" className="btn-primary">
              –î–æ–±–∞–≤–∏—Ç—å {getSelectedOperationType()?.label.toLowerCase()}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default OperationModal;