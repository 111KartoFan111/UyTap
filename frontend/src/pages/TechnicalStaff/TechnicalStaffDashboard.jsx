// frontend/src/pages/TechnicalStaff/TechnicalStaffDashboard.jsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import { useState, useEffect, useCallback, useRef } from 'react';
import { 
  FiTool, 
  FiAlertTriangle, 
  FiCheckCircle, 
  FiClock,
  FiSettings,
  FiZap,
  FiDroplet,
  FiWifi,
  FiThermometer,
  FiPlay,
  FiPause,
  FiCheck,
  FiUser,
  FiMapPin,
  FiPhone,
  FiPlus,
  FiList,
  FiFilter,
  FiBarChart2,
  FiCalendar,
  FiHome,
  FiInfo,
  FiRefreshCw
} from 'react-icons/fi';
import { useAuth } from '../../contexts/AuthContext';
import { useData } from '../../contexts/DataContext';
import Modal from '../../components/Common/Modal.jsx';
import './TechnicalStaffDashboard.css';

const TechnicalStaffDashboard = () => {
  const { user } = useAuth();
  const { tasks, properties, utils } = useData();
  
  const [myTasks, setMyTasks] = useState([]);
  const [currentTask, setCurrentTask] = useState(null);
  const [isWorking, setIsWorking] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [workTimer, setWorkTimer] = useState(0);
  const [workStartTime, setWorkStartTime] = useState(null);
  const [totalPausedTime, setTotalPausedTime] = useState(0);
  const [pauseStartTime, setPauseStartTime] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showTaskModal, setShowTaskModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [completionData, setCompletionData] = useState({
    notes: '',
    rating: 5,
    used_materials: [],
    follow_up_needed: false
  });
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–ï–ó localStorage - —Ç–æ–ª—å–∫–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const [todayStats, setTodayStats] = useState({
    completedTasks: 0,
    activeRequests: 0,
    urgentIssues: 0,
    workingHours: 0,
    avgCompletionTime: 0
  });

  const [filters, setFilters] = useState({
    taskType: '',
    priority: '',
    property: ''
  });

  const [availableProperties, setAvailableProperties] = useState([]);
  const [lastSyncTime, setLastSyncTime] = useState(null);
  const [syncStatus, setSyncStatus] = useState('idle'); // idle, syncing, error
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
  const isInitialized = useRef(false);
  const syncIntervalRef = useRef(null);
  const workTimerIntervalRef = useRef(null);

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const SYNC_INTERVAL = 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞
  const WORK_STATE_SYNC_INTERVAL = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  const LOCAL_WORK_STATE_KEY = 'tech_work_state_temp'; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
  const loadStatisticsFromServer = useCallback(async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ Tasks.jsx
      console.log('üìä Loading statistics from server...');
      
      // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏
      const myTasksData = await tasks.getMy();
      console.log('Tasks loaded for stats:', myTasksData.length);
      
      // 2. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è/–º–µ—Å—è—Ü
      const today = new Date();
      const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
      const completedThisMonth = myTasksData.filter(task => {
        if (task.status !== 'completed' || !task.completed_at) return false;
        const completedDate = new Date(task.completed_at);
        return completedDate >= startOfMonth;
      });
      
      // 3. –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
      const activeTasks = myTasksData.filter(task => 
        !['completed', 'cancelled', 'failed'].includes(task.status)
      );
      
      // 4. –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö
      const urgentTasks = activeTasks.filter(task => task.priority === 'urgent');
      
      // 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å actual_duration)
      const totalMinutes = completedThisMonth.reduce((sum, task) => {
        return sum + (task.actual_duration || 0);
      }, 0);
      const workingHours = totalMinutes / 60;
      
      // 6. –°—Ä–µ–¥–Ω–∏–π –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      const tasksWithDuration = completedThisMonth.filter(task => task.actual_duration > 0);
      const avgCompletionTime = tasksWithDuration.length > 0 
        ? tasksWithDuration.reduce((sum, task) => sum + task.actual_duration, 0) / tasksWithDuration.length
        : 0;
      
      // 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const newStats = {
        completedTasks: completedThisMonth.length,
        activeRequests: activeTasks.length,
        urgentIssues: urgentTasks.length,
        workingHours: Math.round(workingHours * 10) / 10, // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
        avgCompletionTime: Math.round(avgCompletionTime)
      };
      
      console.log('üìä Statistics calculated:', newStats);
      setTodayStats(newStats);
      
    } catch (error) {
      console.error('Error loading statistics from server:', error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      setTodayStats({
        completedTasks: 0,
        activeRequests: 0,
        urgentIssues: 0,
        workingHours: 0,
        avgCompletionTime: 0
      });
    }
  }, [tasks]);

  // –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é loadMyTasksFromServer —á—Ç–æ–±—ã –æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const loadMyTasksFromServer = useCallback(async () => {
    try {
      console.log('üìã Loading my tasks from server...');
      const assignedTasks = await tasks.getMy();
      
      // –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–π—Å—Ç–≤–∞—Ö
      const enrichedTasks = await Promise.all(
        assignedTasks.map(async (task) => {
          let property = null;
          if (task.property_id) {
            try {
              property = await properties.getById(task.property_id);
            } catch (error) {
              console.error('Error loading property:', error);
            }
          }
          
          return {
            ...task,
            property,
            typeData: getTaskTypeData(task.task_type)
          };
        })
      );
      
      setMyTasks(enrichedTasks);
      console.log(`üìã Loaded ${enrichedTasks.length} tasks from server`);
      
      // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await loadStatisticsFromServer();
      
    } catch (error) {
      console.error('Error loading tasks from server:', error);
      utils.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á —Å —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }, [tasks, properties, loadStatisticsFromServer, utils]);

  // –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
  const updateStatsAfterTaskAction = useCallback(async () => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    setTimeout(async () => {
      try {
        await loadStatisticsFromServer();
        console.log('üìä Statistics updated after task action');
      } catch (error) {
        console.error('Error updating statistics:', error);
      }
    }, 500);
  }, [loadStatisticsFromServer]);

  // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const startSyncTimer = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if (syncIntervalRef.current) {
      clearInterval(syncIntervalRef.current);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    syncIntervalRef.current = setInterval(() => {
      syncWithServer();
    }, SYNC_INTERVAL);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const checkCurrentTaskStatus = useCallback(async () => {
    if (currentTask) {
      try {
        const serverTask = await tasks.getById(currentTask.id);
        
        // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (!serverTask || !['assigned', 'in_progress'].includes(serverTask.status)) {
          console.log('Task completed on server, clearing local state');
          clearWorkStateTemp();
          setCurrentTask(null);
          setIsWorking(false);
          setIsPaused(false);
          setWorkTimer(0);
          setWorkStartTime(null);
          setTotalPausedTime(0);
          setPauseStartTime(null);
        }
      } catch (error) {
        console.error('Error checking task status:', error);
      }
    }
  }, [currentTask, tasks]); // –î–æ–±–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å tasks

  // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é syncWithServer
  const syncWithServer = useCallback(async () => {
    try {
      setSyncStatus('syncing');
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const syncPromises = [
        loadMyTasksFromServer(), // –≠—Ç–æ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        checkCurrentTaskStatus()
      ];

      await Promise.allSettled(syncPromises);
      
      setLastSyncTime(new Date());
      setSyncStatus('idle');
      
      console.log('‚úÖ Server sync completed at', new Date().toLocaleTimeString());
    } catch (error) {
      console.error('‚ùå Server sync failed:', error);
      setSyncStatus('error');
      // –ü–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimeout(() => syncWithServer(), 30000);
    }
  }, [loadMyTasksFromServer, checkCurrentTaskStatus]); // –î–æ–±–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–æ –∫–Ω–æ–ø–∫–µ)
  const forceSyncWithServer = useCallback(async () => {
    await syncWithServer();
    utils.showSuccess('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
  }, [syncWithServer, utils]);

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã (–Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
  const saveWorkStateToTemp = useCallback(() => {
    if (currentTask && workStartTime) {
      const workState = {
        taskId: currentTask.id,
        startTime: workStartTime,
        totalPausedTime,
        isWorking,
        isPaused,
        pauseStartTime,
        workTimer,
        lastUpdate: Date.now()
      };
      localStorage.setItem(LOCAL_WORK_STATE_KEY, JSON.stringify(workState));
    }
  }, [currentTask, workStartTime, totalPausedTime, isWorking, isPaused, pauseStartTime, workTimer]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  const restoreWorkStateFromTemp = useCallback(async () => {
    const savedState = localStorage.getItem(LOCAL_WORK_STATE_KEY);
    if (savedState) {
      try {
        const workState = JSON.parse(savedState);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
        if (Date.now() - workState.lastUpdate > maxAge) {
          console.log('Work state too old, clearing');
          clearWorkStateTemp();
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–¥–∞—á–∞ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (workState.taskId) {
          try {
            const currentTaskData = await tasks.getById(workState.taskId);
            
            if (currentTaskData && currentTaskData.status === 'in_progress') {
              // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              setCurrentTask(currentTaskData);
              setWorkStartTime(workState.startTime);
              setTotalPausedTime(workState.totalPausedTime || 0);
              setIsWorking(workState.isWorking);
              setIsPaused(workState.isPaused);
              setPauseStartTime(workState.pauseStartTime);
              
              // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
              const now = Date.now();
              let currentPausedTime = workState.totalPausedTime || 0;
              
              if (workState.isPaused && workState.pauseStartTime) {
                currentPausedTime += (now - workState.pauseStartTime);
                setTotalPausedTime(currentPausedTime);
              }
              
              const workDuration = Math.floor((now - workState.startTime - currentPausedTime) / 1000);
              setWorkTimer(Math.max(0, workDuration));
              
              console.log('‚úÖ Work state restored from temp storage');
            } else {
              console.log('Task no longer in progress, clearing work state');
              clearWorkStateTemp();
            }
          } catch (error) {
            console.error('Error validating task state:', error);
            clearWorkStateTemp();
          }
        }
      } catch (error) {
        console.error('Error restoring work state:', error);
        clearWorkStateTemp();
      }
    }
  }, [tasks]); // –î–æ–±–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å tasks

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  const syncWorkStateWithServer = useCallback(async () => {
    if (currentTask && isWorking) {
      try {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        // await tasks.updateWorkState(currentTask.id, {
        //   working_since: workStartTime,
        //   is_paused: isPaused,
        //   pause_time: pauseStartTime,
        //   total_paused_time: totalPausedTime
        // });
        console.log('üîÑ Work state synced with server');
      } catch (error) {
        console.error('Failed to sync work state with server:', error);
      }
    }
  }, [currentTask, isWorking, workStartTime, isPaused, pauseStartTime, totalPausedTime]);

  // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  const clearWorkStateTemp = useCallback(() => {
    localStorage.removeItem(LOCAL_WORK_STATE_KEY);
  }, []);

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  const clearWorkState = useCallback(() => {
    clearWorkStateTemp();
    setCurrentTask(null);
    setIsWorking(false);
    setIsPaused(false);
    setWorkTimer(0);
    setWorkStartTime(null);
    setTotalPausedTime(0);
    setPauseStartTime(null);
  }, [clearWorkStateTemp]);

  // –ò –æ–±–Ω–æ–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é initializeDashboard —á—Ç–æ–±—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  const initializeDashboard = useCallback(async () => {
    try {
      setLoading(true);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      await restoreWorkStateFromTemp();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      await Promise.all([
        loadProperties(),
        loadMyTasksFromServer() // –≠—Ç–æ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      ]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      await checkCurrentTaskStatus();
      
    } catch (error) {
      console.error('Error initializing dashboard:', error);
      utils.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏');
    } finally {
      setLoading(false);
    }
  }, [restoreWorkStateFromTemp, loadMyTasksFromServer, checkCurrentTaskStatus, utils]); // –î–æ–±–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  const loadProperties = useCallback(async () => {
    try {
      const propertiesList = await properties.getAll({ limit: 100 });
      setAvailableProperties(propertiesList || []);
    } catch (error) {
      console.error('Error loading properties:', error);
    }
  }, [properties]);

  // –û–°–ù–û–í–ù–û–ô useEffect —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
  useEffect(() => {
    if (!isInitialized.current) {
      isInitialized.current = true;
      initializeDashboard();
      startSyncTimer();
    }

    return () => {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (syncIntervalRef.current) {
        clearInterval(syncIntervalRef.current);
      }
      if (workTimerIntervalRef.current) {
        clearInterval(workTimerIntervalRef.current);
      }
    };
  }, [initializeDashboard, startSyncTimer]); // –î–æ–±–∞–≤–∏–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç—ã (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
  useEffect(() => {
    if (workTimerIntervalRef.current) {
      clearInterval(workTimerIntervalRef.current);
    }

    if (isWorking && !isPaused && currentTask && workStartTime) {
      workTimerIntervalRef.current = setInterval(() => {
        const now = Date.now();
        const workDuration = Math.floor((now - workStartTime - totalPausedTime) / 1000);
        setWorkTimer(workDuration);
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        if (workDuration % 30 === 0) {
          saveWorkStateToTemp();
          syncWorkStateWithServer();
        }
      }, 1000);
    }
    
    return () => {
      if (workTimerIntervalRef.current) {
        clearInterval(workTimerIntervalRef.current);
      }
    };
  }, [isWorking, isPaused, currentTask, workStartTime, totalPausedTime, saveWorkStateToTemp, syncWorkStateWithServer]);

  const getTaskTypeData = (taskType) => {
    const types = {
      maintenance: { icon: FiTool, name: '–û–±—â–∏–π —Ä–µ–º–æ–Ω—Ç', color: '#27ae60' },
      electrical: { icon: FiZap, name: '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞', color: '#f39c12' },
      plumbing: { icon: FiDroplet, name: '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞', color: '#3498db' },
      hvac: { icon: FiThermometer, name: '–û—Ç–æ–ø–ª–µ–Ω–∏–µ/–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', color: '#e74c3c' },
      internet: { icon: FiWifi, name: '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/–¢–í', color: '#9b59b6' },
      cleaning: { icon: FiTool, name: '–£–±–æ—Ä–∫–∞', color: '#27ae60' },
      check_in: { icon: FiUser, name: '–ó–∞—Å–µ–ª–µ–Ω–∏–µ', color: '#3498db' },
      check_out: { icon: FiUser, name: '–í—ã—Å–µ–ª–µ–Ω–∏–µ', color: '#e67e22' },
      delivery: { icon: FiTool, name: '–î–æ—Å—Ç–∞–≤–∫–∞', color: '#9b59b6' },
      laundry: { icon: FiTool, name: '–°—Ç–∏—Ä–∫–∞', color: '#f39c12' }
    };
    return types[taskType] || types.maintenance;
  };

  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const startTask = async (task) => {
    try {
      if (currentTask) {
        utils.showWarning('–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π');
        return;
      }

      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ—ë –Ω–∞ —Å–µ–±—è
      if (task.status === 'pending' || !task.assigned_to) {
        try {
          await tasks.assign(task.id, user.id);
        } catch (assignError) {
          console.error('Error assigning task:', assignError);
        }
      }

      // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
      await tasks.start(task.id);
      
      const now = Date.now();
      const updatedTask = {...task, assigned_to: user.id, status: 'in_progress'};
      
      setCurrentTask(updatedTask);
      setIsWorking(true);
      setIsPaused(false);
      setWorkTimer(0);
      setWorkStartTime(now);
      setTotalPausedTime(0);
      setPauseStartTime(null);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ
      setTimeout(() => {
        saveWorkStateToTemp();
        syncWorkStateWithServer();
      }, 100);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
      setMyTasks(prev => prev.map(t => 
        t.id === task.id ? updatedTask : t
      ));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      updateStatsAfterTaskAction();
      
      utils.showSuccess('–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω.');
    } catch (error) {
      console.error('Error starting task:', error);
      utils.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É');
    }
  };

  const pauseTask = () => {
    if (!isPaused) {
      setPauseStartTime(Date.now());
      setIsPaused(true);
      utils.showInfo('–†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      setTimeout(() => {
        saveWorkStateToTemp();
        syncWorkStateWithServer();
      }, 100);
    }
  };

  const resumeTask = () => {
    if (isPaused && pauseStartTime) {
      const pauseDuration = Date.now() - pauseStartTime;
      setTotalPausedTime(prev => prev + pauseDuration);
      setIsPaused(false);
      setPauseStartTime(null);
      utils.showInfo('–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      setTimeout(() => {
        saveWorkStateToTemp();
        syncWorkStateWithServer();
      }, 100);
    }
  };

  const openCompleteModal = (task) => {
    setSelectedTask(task);
    setCompletionData({
      notes: '',
      rating: 5,
      used_materials: [],
      follow_up_needed: false
    });
    setShowTaskModal(true);
  };

  const completeTask = async () => {
    try {
      if (!selectedTask || !completionData.notes.trim()) {
        utils.showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏');
        return;
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      let actualDuration = null;
      
      if (selectedTask.id === currentTask?.id && workTimer > 0) {
        actualDuration = Math.ceil(workTimer / 60);
      }

      await tasks.complete(selectedTask.id, {
        completion_notes: completionData.notes,
        actual_duration: actualDuration,
        quality_rating: completionData.rating
      });
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
      if (selectedTask.id === currentTask?.id) {
        clearWorkState();
      }
      
      // –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ
      setMyTasks(prev => prev.filter(t => t.id !== selectedTask.id));
      
      setShowTaskModal(false);
      setSelectedTask(null);
      
      const timeText = actualDuration ? ` (${actualDuration} –º–∏–Ω)` : '';
      utils.showSuccess(`–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${timeText}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      updateStatsAfterTaskAction();
      
    } catch (error) {
      console.error('Error completing task:', error);
      utils.showError('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgent': return '#e74c3c';
      case 'high': return '#f39c12';
      case 'medium': return '#3498db';
      case 'low': return '#27ae60';
      default: return '#95a5a6';
    }
  };

  const getPriorityText = (priority) => {
    switch (priority) {
      case 'urgent': return '–°—Ä–æ—á–Ω–æ';
      case 'high': return '–í—ã—Å–æ–∫–∏–π';
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π';
      case 'low': return '–ù–∏–∑–∫–∏–π';
      default: return priority;
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á (–∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ)
  const availableTasks = myTasks.filter(task => 
    !['completed', 'cancelled', 'failed'].includes(task.status)
  );

  const filteredTasks = availableTasks.filter(task => {
    if (filters.taskType && task.task_type !== filters.taskType) return false;
    if (filters.priority && task.priority !== filters.priority) return false;
    if (filters.property && task.property_id !== filters.property) return false;
    return true;
  });

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const tasksByStatus = {
    urgent: filteredTasks.filter(t => t.priority === 'urgent'),
    assigned: filteredTasks.filter(t => t.status === 'assigned'),
    in_progress: filteredTasks.filter(t => t.status === 'in_progress'),
    pending: filteredTasks.filter(t => t.status === 'pending')
  };

  const getSyncStatusIcon = () => {
    switch (syncStatus) {
      case 'syncing': return <FiRefreshCw className="spinning" />;
      case 'error': return <FiAlertTriangle style={{ color: '#e74c3c' }} />;
      default: return <FiCheckCircle style={{ color: '#27ae60' }} />;
    }
  };

  if (loading) {
    return (
      <div className="technical-dashboard">
        <div className="loading-container" style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center', 
          height: '200px',
          flexDirection: 'column',
          gap: '16px'
        }}>
          <FiRefreshCw size={32} className="spinning" />
          <div>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–Ω–µ–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="technical-dashboard">
      <div className="technical-header">
        <h1>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</h1>
        <div className="user-greeting">
          –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ì–æ—Ç–æ–≤ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!
        </div>
        
        {/* –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
        <div style={{ 
          marginTop: '8px', 
          display: 'flex', 
          alignItems: 'center', 
          gap: '8px',
          fontSize: '12px',
          color: '#666'
        }}>
          {getSyncStatusIcon()}
          {syncStatus === 'syncing' && '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...'}
          {syncStatus === 'error' && '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'}
          {syncStatus === 'idle' && lastSyncTime && 
            `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${lastSyncTime.toLocaleTimeString()}`
          }
          <button
            onClick={forceSyncWithServer}
            style={{
              marginLeft: '12px',
              padding: '4px 8px',
              background: '#f8f9fa',
              border: '1px solid #ddd',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '11px'
            }}
          >
            <FiRefreshCw /> –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
        
        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div style={{ marginTop: '16px', display: 'flex', gap: '12px', flexWrap: 'wrap' }}>
          <select
            value={filters.taskType}
            onChange={(e) => setFilters(prev => ({ ...prev, taskType: e.target.value }))}
            style={{ padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}
          >
            <option value="">–í—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á</option>
            <option value="maintenance">–û–±—â–∏–π —Ä–µ–º–æ–Ω—Ç</option>
            <option value="electrical">–≠–ª–µ–∫—Ç—Ä–∏–∫–∞</option>
            <option value="plumbing">–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞</option>
            <option value="hvac">–û—Ç–æ–ø–ª–µ–Ω–∏–µ/–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä</option>
            <option value="internet">–ò–Ω—Ç–µ—Ä–Ω–µ—Ç/–¢–í</option>
            <option value="cleaning">–£–±–æ—Ä–∫–∞</option>
            <option value="check_in">–ó–∞—Å–µ–ª–µ–Ω–∏–µ</option>
            <option value="check_out">–í—ã—Å–µ–ª–µ–Ω–∏–µ</option>
            <option value="delivery">–î–æ—Å—Ç–∞–≤–∫–∞</option>
            <option value="laundry">–°—Ç–∏—Ä–∫–∞</option>
          </select>
          
          <select
            value={filters.priority}
            onChange={(e) => setFilters(prev => ({ ...prev, priority: e.target.value }))}
            style={{ padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}
          >
            <option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
            <option value="urgent">–°—Ä–æ—á–Ω–æ</option>
            <option value="high">–í—ã—Å–æ–∫–∏–π</option>
            <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
            <option value="low">–ù–∏–∑–∫–∏–π</option>
          </select>
          
          <select
            value={filters.property}
            onChange={(e) => setFilters(prev => ({ ...prev, property: e.target.value }))}
            style={{ padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}
          >
            <option value="">–í—Å–µ –æ–±—ä–µ–∫—Ç—ã</option>
            {availableProperties.map(prop => (
              <option key={prop.id} value={prop.id}>
                {prop.name} ({prop.number})
              </option>
            ))}
          </select>
          
          <button
            onClick={() => setFilters({ taskType: '', priority: '', property: '' })}
            style={{ 
              padding: '8px 16px', 
              background: '#f8f9fa', 
              border: '1px solid #ddd', 
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            <FiFilter /> –°–±—Ä–æ—Å–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="daily-stats">
        <div className="stat-card">
          <div className="stat-icon completed">
            <FiCheckCircle />
          </div>
          <div className="stat-content">
            <h3>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</h3>
            <div className="stat-number">{todayStats.completedTasks}</div>
            <div className="stat-label">–∑–∞—è–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon active">
            <FiTool />
          </div>
          <div className="stat-content">
            <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ</h3>
            <div className="stat-number">{todayStats.activeRequests}</div>
            <div className="stat-label">–∑–∞—è–≤–∫–∏</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon urgent">
            <FiAlertTriangle />
          </div>
          <div className="stat-content">
            <h3>–°—Ä–æ—á–Ω—ã–µ</h3>
            <div className="stat-number">{todayStats.urgentIssues}</div>
            <div className="stat-label">—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</div>
          </div>
        </div>
        
        <div className="stat-card">
          <div className="stat-icon hours">
            <FiClock />
          </div>
          <div className="stat-content">
            <h3>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</h3>
            <div className="stat-number">{todayStats.workingHours}</div>
            <div className="stat-label">—á–∞—Å–æ–≤ –∑–∞ –º–µ—Å—è—Ü</div>
          </div>
        </div>
      </div>

      {/* –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ */}
      {currentTask && (
        <div className="current-task">
          <div className="task-header">
            <h2>–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞</h2>
            <div className="task-timer">
              <FiClock />
              {formatTime(workTimer)}
              {isPaused && <span style={{ marginLeft: '8px', color: '#f39c12' }}>‚è∏Ô∏è –ü–ê–£–ó–ê</span>}
            </div>
          </div>
          
          <div className="task-content">
            <div className="task-info">
              <div className="task-type">
                {React.createElement(currentTask.typeData.icon, { style: { color: currentTask.typeData.color } })}
                <span>{currentTask.typeData.name}</span>
                <div 
                  style={{ 
                    marginLeft: '12px',
                    padding: '2px 8px',
                    borderRadius: '12px',
                    background: getPriorityColor(currentTask.priority),
                    color: 'white',
                    fontSize: '12px',
                    fontWeight: '600'
                  }}
                >
                  {getPriorityText(currentTask.priority)}
                </div>
              </div>
              <h3>{currentTask.title}</h3>
              <div className="task-details">
                <div className="task-room">
                  <FiHome />
                  {currentTask.property?.name || `–û–±—ä–µ–∫—Ç ${currentTask.property_id}`}
                  {currentTask.property?.number && ` (${currentTask.property.number})`}
                </div>
                <div className="task-client">
                  <FiUser />
                  –°–æ–∑–¥–∞–ª: {currentTask.created_by || '–°–∏—Å—Ç–µ–º–∞'}
                </div>
                {currentTask.due_date && (
                  <div className="task-client">
                    <FiCalendar />
                    –°—Ä–æ–∫: {new Date(currentTask.due_date).toLocaleDateString('ru-RU')}
                  </div>
                )}
              </div>
              {currentTask.description && (
                <div className="task-description">{currentTask.description}</div>
              )}
              {currentTask.estimated_duration && (
                <div style={{ marginTop: '12px', fontSize: '14px', color: '#666' }}>
                  <FiClock /> –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {currentTask.estimated_duration} –º–∏–Ω
                </div>
              )}
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ—Ç—ã */}
              <div style={{ 
                marginTop: '12px', 
                padding: '8px 12px', 
                background: isPaused ? '#fff3cd' : '#d4edda',
                borderRadius: '6px',
                fontSize: '14px',
                color: isPaused ? '#856404' : '#155724'
              }}>
                <FiInfo style={{ marginRight: '6px' }} />
                {isPaused ? '–†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'}
              </div>
            </div>
            
            <div className="task-controls">
              {!isPaused ? (
                <button className="btn-pause" onClick={pauseTask}>
                  <FiPause /> –ü–∞—É–∑–∞
                </button>
              ) : (
                <button className="btn-resume" onClick={resumeTask}>
                  <FiPlay /> –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                </button>
              )}
              
              <button 
                className="btn-complete" 
                onClick={() => openCompleteModal(currentTask)}
              >
                <FiCheck /> –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ */}
      {tasksByStatus.urgent.length > 0 && (
        <div className="urgent-requests">
          <h2>
            <FiAlertTriangle />
            –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({tasksByStatus.urgent.length})
          </h2>
          <div className="requests-grid">
            {tasksByStatus.urgent.map(task => (
              <div key={task.id} className="request-card urgent">
                <div className="request-header">
                  <div className="request-type">
                    {React.createElement(task.typeData.icon, { style: { color: task.typeData.color } })}
                    <span>{task.typeData.name}</span>
                  </div>
                  <div className="priority urgent">–°–†–û–ß–ù–û</div>
                </div>
                
                <h4>{task.title}</h4>
                <div className="request-details">
                  <div className="request-room">
                    <FiHome />
                    {task.property?.name || `–û–±—ä–µ–∫—Ç ${task.property_id}`}
                    {task.property?.number && ` (${task.property.number})`}
                  </div>
                  <div className="request-client">
                    <FiUser />
                    {task.created_by || '–°–∏—Å—Ç–µ–º–∞'}
                  </div>
                </div>
                
                {task.description && (
                  <div className="request-description">{task.description}</div>
                )}
                
                <div className="request-meta">
                  <div className="request-time">
                    <FiClock />
                    ~{task.estimated_duration || 60} –º–∏–Ω
                  </div>
                  <div className="request-created">
                    {new Date(task.created_at).toLocaleDateString('ru-RU')}
                  </div>
                </div>
                
                <div className="request-actions">
                  {task.status === 'assigned' && (
                    <button 
                      className="btn-start urgent"
                      onClick={() => startTask(task)}
                      disabled={!!currentTask}
                      style={{ marginRight: '8px' }}
                    >
                      <FiPlay /> –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ
                    </button>
                  )}
                  {task.status === 'pending' && (
                    <button 
                      className="btn-start urgent"
                      onClick={() => startTask(task)}
                      disabled={!!currentTask}
                      style={{ marginRight: '8px' }}
                    >
                      <FiPlay /> –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ
                    </button>
                  )}
                  {task.status === 'in_progress' && (
                    <button 
                      className="btn-start urgent"
                      onClick={() => openCompleteModal(task)}
                      style={{ marginRight: '8px' }}
                    >
                      <FiCheck /> –ó–∞–≤–µ—Ä—à–∏—Ç—å
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –í—Å–µ –∑–∞–¥–∞—á–∏ */}
      <div className="requests-sections">
        <div className="requests-section">
          <h2>–ú–æ–∏ –∑–∞–¥–∞—á–∏ ({filteredTasks.length})</h2>
          
          {/* –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ */}
          {tasksByStatus.pending.length > 0 && (
            <>
              <h3 style={{ marginTop: '24px', marginBottom: '16px', color: '#f39c12' }}>
                <FiList /> –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ({tasksByStatus.pending.length})
              </h3>
              <div className="requests-list">
                {tasksByStatus.pending.map(task => (
                  <TaskCard 
                    key={task.id} 
                    task={task} 
                    currentTask={currentTask}
                    onStart={startTask}
                    onComplete={openCompleteModal}
                  />
                ))}
              </div>
            </>
          )}
          
          {filteredTasks.length === 0 && (
            <div className="no-tasks">
              <FiCheckCircle size={48} />
              <h3>–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</h3>
              <p>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.</p>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ */}
      <Modal 
        isOpen={showTaskModal} 
        onClose={() => {
          setShowTaskModal(false);
          setSelectedTask(null);
        }}
        title={`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${selectedTask?.title || ''}`}
      >
        {selectedTask && (
          <div style={{ display: 'grid', gap: '16px' }}>
            <div style={{ padding: '12px', background: '#f8f9fa', borderRadius: '8px' }}>
              <div><strong>–ó–∞–¥–∞—á–∞:</strong> {selectedTask.title}</div>
              <div><strong>–¢–∏–ø:</strong> {selectedTask.typeData.name}</div>
              <div><strong>–û–±—ä–µ–∫—Ç:</strong> {selectedTask.property?.name || `–û–±—ä–µ–∫—Ç ${selectedTask.property_id}`}</div>
              {selectedTask.id === currentTask?.id && (
                <div><strong>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> {formatTime(workTimer)} ({Math.ceil(workTimer / 60)} –º–∏–Ω)</div>
              )}
              {selectedTask.estimated_duration && (
                <div><strong>–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è:</strong> {selectedTask.estimated_duration} –º–∏–Ω</div>
              )}
            </div>
            
            <div>
              <label>–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ *</label>
              <textarea
                value={completionData.notes}
                onChange={(e) => setCompletionData(prev => ({ ...prev, notes: e.target.value }))}
                placeholder="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã..."
                rows={4}
                style={{ 
                  width: '100%', 
                  padding: '8px', 
                  border: '1px solid #ddd', 
                  borderRadius: '4px',
                  resize: 'vertical'
                }}
              />
            </div>
            
            <div>
              <label>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
              <div style={{ display: 'flex', gap: '8px', alignItems: 'center', marginTop: '8px' }}>
                {[1, 2, 3, 4, 5].map(rating => (
                  <button
                    key={rating}
                    onClick={() => setCompletionData(prev => ({ ...prev, rating }))}
                    style={{
                      padding: '8px 12px',
                      border: completionData.rating === rating ? '2px solid #3498db' : '1px solid #ddd',
                      background: completionData.rating === rating ? '#e8f4fd' : 'white',
                      borderRadius: '4px',
                      cursor: 'pointer',
                      fontWeight: completionData.rating === rating ? '600' : 'normal'
                    }}
                  >
                    {rating} ‚≠ê
                  </button>
                ))}
              </div>
              <div style={{ fontSize: '12px', color: '#666', marginTop: '4px' }}>
                1 - –ü–ª–æ—Ö–æ, 2 - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, 3 - –•–æ—Ä–æ—à–æ, 4 - –û—Ç–ª–∏—á–Ω–æ, 5 - –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ
              </div>
            </div>
            
            <div>
              <label style={{ display: 'flex', alignItems: 'center', gap: '8px', cursor: 'pointer' }}>
                <input
                  type="checkbox"
                  checked={completionData.follow_up_needed}
                  onChange={(e) => setCompletionData(prev => ({ ...prev, follow_up_needed: e.target.checked }))}
                />
                –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
              </label>
            </div>
            
            <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', marginTop: '24px' }}>
              <button 
                onClick={() => {
                  setShowTaskModal(false);
                  setSelectedTask(null);
                }}
                style={{ 
                  padding: '10px 20px', 
                  border: '1px solid #ddd', 
                  background: 'white', 
                  borderRadius: '4px',
                  cursor: 'pointer'
                }}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                onClick={completeTask}
                className="btn-start"
                style={{ background: '#27ae60' }}
                disabled={!completionData.notes.trim()}
              >
                <FiCheck /> –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
              </button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
const TaskCard = ({ task, currentTask, onStart, onComplete }) => {
  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'urgent': return '#e74c3c';
      case 'high': return '#f39c12';
      case 'medium': return '#3498db';
      case 'low': return '#27ae60';
      default: return '#95a5a6';
    }
  };

  const getPriorityText = (priority) => {
    switch (priority) {
      case 'urgent': return '–°—Ä–æ—á–Ω–æ';
      case 'high': return '–í—ã—Å–æ–∫–∏–π';
      case 'medium': return '–°—Ä–µ–¥–Ω–∏–π';
      case 'low': return '–ù–∏–∑–∫–∏–π';
      default: return priority;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'pending': return '#f39c12';
      case 'assigned': return '#3498db';
      case 'in_progress': return '#27ae60';
      case 'completed': return '#95a5a6';
      case 'cancelled': return '#e74c3c';
      default: return '#95a5a6';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
      case 'assigned': return '–ù–∞–∑–Ω–∞—á–µ–Ω–æ';
      case 'in_progress': return '–í —Ä–∞–±–æ—Ç–µ';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–æ';
      default: return status;
    }
  };

  const canStartTask = (task.status === 'assigned' || task.status === 'pending') && !currentTask;
  const canCompleteTask = task.status === 'in_progress';

  return (
    <div className="request-card">
      <div className="request-header">
        <div className="request-type">
          {React.createElement(task.typeData.icon, { style: { color: task.typeData.color } })}
          <span>{task.typeData.name}</span>
        </div>
        <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
          <div 
            className="priority"
            style={{ 
              color: getPriorityColor(task.priority),
              background: getPriorityColor(task.priority) + '20',
              padding: '2px 8px',
              borderRadius: '12px',
              fontSize: '11px',
              fontWeight: '600'
            }}
          >
            {getPriorityText(task.priority)}
          </div>
          <div 
            style={{ 
              color: getStatusColor(task.status),
              background: getStatusColor(task.status) + '20',
              padding: '2px 8px',
              borderRadius: '12px',
              fontSize: '11px',
              fontWeight: '600'
            }}
          >
            {getStatusText(task.status)}
          </div>
        </div>
      </div>
      
      <h4>{task.title}</h4>
      <div className="request-details">
        <div className="request-room">
          <FiHome />
          {task.property?.name || `–û–±—ä–µ–∫—Ç ${task.property_id}`}
          {task.property?.number && ` (${task.property.number})`}
        </div>
        <div className="request-client">
          <FiUser />
          –°–æ–∑–¥–∞–ª: {task.created_by || '–°–∏—Å—Ç–µ–º–∞'}
        </div>
      </div>
      
      {task.description && (
        <div className="request-description">{task.description}</div>
      )}
      
      <div className="request-meta">
        <div className="request-time">
          <FiClock />
          ~{task.estimated_duration || 60} –º–∏–Ω
        </div>
        <div className="request-created">
          {new Date(task.created_at).toLocaleDateString('ru-RU')}
        </div>
      </div>
      
      {task.due_date && (
        <div style={{ 
          marginTop: '8px', 
          padding: '4px 8px', 
          background: '#fff3cd', 
          borderRadius: '4px',
          fontSize: '12px',
          color: '#856404'
        }}>
          <FiCalendar /> –°—Ä–æ–∫: {new Date(task.due_date).toLocaleDateString('ru-RU')}
        </div>
      )}
      
      <div className="request-actions">
        {canStartTask && (
          <button 
            className="btn-start"
            onClick={() => onStart(task)}
            style={{ marginRight: '8px' }}
          >
            <FiPlay /> –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞—á–µ
          </button>
        )}
        {canCompleteTask && (
          <button 
            className="btn-start"
            onClick={() => onComplete(task)}
            style={{ marginRight: '8px', background: '#27ae60' }}
          >
            <FiCheck /> –ó–∞–≤–µ—Ä—à–∏—Ç—å
          </button>
        )}
        {currentTask && task.id !== currentTask.id && (
          <div style={{ 
            padding: '6px 12px', 
            background: '#f8f9fa', 
            borderRadius: '4px', 
            fontSize: '12px', 
            color: '#666',
            textAlign: 'center'
          }}>
            –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
          </div>
        )}
        {!currentTask && task.status === 'pending' && (
          <div style={{ 
            padding: '4px 8px', 
            background: '#e8f5e8', 
            borderRadius: '4px', 
            fontSize: '11px', 
            color: '#2d5a2d',
            textAlign: 'center',
            marginTop: '8px'
          }}>
            üí° –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å" –∑–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—Å—è –Ω–∞ –≤–∞—Å
          </div>
        )}
      </div>
    </div>
  );
};

export default TechnicalStaffDashboard;