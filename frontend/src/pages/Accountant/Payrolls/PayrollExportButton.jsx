// frontend/src/pages/Accountant/Payrolls/PayrollExportButton.jsx
import React, { useState } from 'react';
import { FiDownload, FiSettings } from 'react-icons/fi';
import { useData } from '../../../contexts/DataContext';
import './PayrollExportButton.css'; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç–∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ

const PayrollExportButton = ({ payrollItem, employee, variant = 'icon' }) => {
  const { payroll, utils } = useData();
  const [loading, setLoading] = useState(false);
  const [showOptions, setShowOptions] = useState(false);

  const handleExport = async (format = 'xlsx', includeTaxBreakdown = true) => {
    try {
      setLoading(true);
      setShowOptions(false);

      console.log('üîÑ Exporting payroll for:', payrollItem.id, { format, includeTaxBreakdown });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const periodStart = payrollItem.period_start || new Date(payrollItem.period_year, payrollItem.period_month - 1, 1);
      const periodEnd = payrollItem.period_end || new Date(payrollItem.period_year, payrollItem.period_month, 0, 23, 59, 59);

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const exportParams = {
        start_date: periodStart.toISOString(),
        end_date: periodEnd.toISOString(),
        user_id: payrollItem.user_id,
        format: format,
        include_tax_breakdown: includeTaxBreakdown
      };

      // –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
      const blob = await payroll.exportPayrollWithTaxes(exportParams);

      if (!blob || blob.size === 0) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const employeeName = employee ? 
        `${employee.first_name}_${employee.last_name}`.replace(/\s+/g, '_') : 
        'unknown';
      
      const period = `${payrollItem.period_month || 'XX'}_${payrollItem.period_year || 'XXXX'}`;
      const filename = `payroll_${employeeName}_${period}.${format}`;

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      utils.downloadFile(blob, filename);
      utils.showSuccess('–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');

      console.log('‚úÖ Payroll export successful');

    } catch (error) {
      console.error('‚ùå Payroll export failed:', error);
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É';
      if (error.message) {
        if (error.message.includes('404')) {
          errorMessage = '–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (error.message.includes('403')) {
          errorMessage = '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç';
        } else {
          errorMessage += `: ${error.message}`;
        }
      }
      
      utils.showError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  if (variant === 'icon') {
    return (
      <div className="payroll-export-dropdown">
        <button 
          className="btn-icon export"
          onClick={() => setShowOptions(!showOptions)}
          disabled={loading}
          title="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã"
        >
          {loading ? (
            <div className="spinner-small"></div>
          ) : (
            <FiDownload />
          )}
        </button>

        {showOptions && (
          <div className="export-options-dropdown">
            <div className="dropdown-header">
              <span>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</span>
              <button 
                className="close-dropdown"
                onClick={() => setShowOptions(false)}
              >
                √ó
              </button>
            </div>
            
            <div className="export-options">
              <button 
                className="export-option"
                onClick={() => handleExport('xlsx', true)}
                disabled={loading}
              >
                <FiDownload />
                <div className="option-info">
                  <span>Excel —Å –Ω–∞–ª–æ–≥–∞–º–∏</span>
                  <small>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞–ª–æ–≥–æ–≤</small>
                </div>
              </button>

              <button 
                className="export-option"
                onClick={() => handleExport('xlsx', false)}
                disabled={loading}
              >
                <FiDownload />
                <div className="option-info">
                  <span>Excel –±–∞–∑–æ–≤—ã–π</span>
                  <small>–ë–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ª–æ–≥–æ–≤</small>
                </div>
              </button>

              <button 
                className="export-option"
                onClick={() => handleExport('csv', true)}
                disabled={loading}
              >
                <FiDownload />
                <div className="option-info">
                  <span>CSV —Å –Ω–∞–ª–æ–≥–∞–º–∏</span>
                  <small>–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã</small>
                </div>
              </button>
            </div>
          </div>
        )}

        {showOptions && (
          <div 
            className="dropdown-overlay"
            onClick={() => setShowOptions(false)}
          />
        )}
      </div>
    );
  }

  if (variant === 'button') {
    return (
      <div className="payroll-export-button-group">
        <button 
          className="btn-outline"
          onClick={() => handleExport('xlsx', true)}
          disabled={loading}
        >
          {loading ? (
            <>
              <div className="spinner-small"></div>
              –≠–∫—Å–ø–æ—Ä—Ç...
            </>
          ) : (
            <>
              <FiDownload />
              –°–∫–∞—á–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É
            </>
          )}
        </button>

        <button 
          className="btn-icon-outline"
          onClick={() => setShowOptions(!showOptions)}
          disabled={loading}
          title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"
        >
          <FiSettings />
        </button>

        {showOptions && (
          <div className="export-options-dropdown right">
            <div className="dropdown-header">
              <span>–û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞</span>
              <button 
                className="close-dropdown"
                onClick={() => setShowOptions(false)}
              >
                √ó
              </button>
            </div>
            
            <div className="export-options">
              <button 
                className="export-option"
                onClick={() => handleExport('xlsx', true)}
                disabled={loading}
              >
                <FiDownload />
                <div className="option-info">
                  <span>Excel —Å –Ω–∞–ª–æ–≥–∞–º–∏</span>
                  <small>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ò–ü–ù –∏ —Å–æ—Ü.–≤–∑–Ω–æ—Å–æ–≤</small>
                </div>
              </button>

              <button 
                className="export-option"
                onClick={() => handleExport('xlsx', false)}
                disabled={loading}
              >
                <FiDownload />
                <div className="option-info">
                  <span>Excel –±–∞–∑–æ–≤—ã–π</span>
                  <small>–¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</small>
                </div>
              </button>

              <button 
                className="export-option"
                onClick={() => handleExport('csv', true)}
                disabled={loading}
              >
                <FiDownload />
                <div className="option-info">
                  <span>CSV —Ñ–æ—Ä–º–∞—Ç</span>
                  <small>–î–ª—è 1–° –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º</small>
                </div>
              </button>
            </div>
          </div>
        )}

        {showOptions && (
          <div 
            className="dropdown-overlay"
            onClick={() => setShowOptions(false)}
          />
        )}
      </div>
    );
  }

  return null;
};

export default PayrollExportButton;